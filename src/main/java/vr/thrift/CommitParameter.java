/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-11")
public class CommitParameter implements org.apache.thrift.TBase<CommitParameter, CommitParameter._Fields>, java.io.Serializable, Cloneable, Comparable<CommitParameter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommitParameter");

  private static final org.apache.thrift.protocol.TField VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("viewNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMMIT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("commitNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RETRY_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("retryCount", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommitParameterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommitParameterTupleSchemeFactory());
  }

  public int viewNumber; // required
  public int commitNumber; // required
  public int retryCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VIEW_NUMBER((short)1, "viewNumber"),
    COMMIT_NUMBER((short)2, "commitNumber"),
    RETRY_COUNT((short)3, "retryCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VIEW_NUMBER
          return VIEW_NUMBER;
        case 2: // COMMIT_NUMBER
          return COMMIT_NUMBER;
        case 3: // RETRY_COUNT
          return RETRY_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VIEWNUMBER_ISSET_ID = 0;
  private static final int __COMMITNUMBER_ISSET_ID = 1;
  private static final int __RETRYCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("viewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.COMMIT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("commitNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.RETRY_COUNT, new org.apache.thrift.meta_data.FieldMetaData("retryCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommitParameter.class, metaDataMap);
  }

  public CommitParameter() {
    this.retryCount = 0;

  }

  public CommitParameter(
    int viewNumber,
    int commitNumber,
    int retryCount)
  {
    this();
    this.viewNumber = viewNumber;
    setViewNumberIsSet(true);
    this.commitNumber = commitNumber;
    setCommitNumberIsSet(true);
    this.retryCount = retryCount;
    setRetryCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommitParameter(CommitParameter other) {
    __isset_bitfield = other.__isset_bitfield;
    this.viewNumber = other.viewNumber;
    this.commitNumber = other.commitNumber;
    this.retryCount = other.retryCount;
  }

  public CommitParameter deepCopy() {
    return new CommitParameter(this);
  }

  @Override
  public void clear() {
    setViewNumberIsSet(false);
    this.viewNumber = 0;
    setCommitNumberIsSet(false);
    this.commitNumber = 0;
    this.retryCount = 0;

  }

  public int getViewNumber() {
    return this.viewNumber;
  }

  public CommitParameter setViewNumber(int viewNumber) {
    this.viewNumber = viewNumber;
    setViewNumberIsSet(true);
    return this;
  }

  public void unsetViewNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  /** Returns true if field viewNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetViewNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  public void setViewNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID, value);
  }

  public int getCommitNumber() {
    return this.commitNumber;
  }

  public CommitParameter setCommitNumber(int commitNumber) {
    this.commitNumber = commitNumber;
    setCommitNumberIsSet(true);
    return this;
  }

  public void unsetCommitNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID);
  }

  /** Returns true if field commitNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCommitNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID);
  }

  public void setCommitNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID, value);
  }

  public int getRetryCount() {
    return this.retryCount;
  }

  public CommitParameter setRetryCount(int retryCount) {
    this.retryCount = retryCount;
    setRetryCountIsSet(true);
    return this;
  }

  public void unsetRetryCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID);
  }

  /** Returns true if field retryCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryCount() {
    return EncodingUtils.testBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID);
  }

  public void setRetryCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRYCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VIEW_NUMBER:
      if (value == null) {
        unsetViewNumber();
      } else {
        setViewNumber((Integer)value);
      }
      break;

    case COMMIT_NUMBER:
      if (value == null) {
        unsetCommitNumber();
      } else {
        setCommitNumber((Integer)value);
      }
      break;

    case RETRY_COUNT:
      if (value == null) {
        unsetRetryCount();
      } else {
        setRetryCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VIEW_NUMBER:
      return Integer.valueOf(getViewNumber());

    case COMMIT_NUMBER:
      return Integer.valueOf(getCommitNumber());

    case RETRY_COUNT:
      return Integer.valueOf(getRetryCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VIEW_NUMBER:
      return isSetViewNumber();
    case COMMIT_NUMBER:
      return isSetCommitNumber();
    case RETRY_COUNT:
      return isSetRetryCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommitParameter)
      return this.equals((CommitParameter)that);
    return false;
  }

  public boolean equals(CommitParameter that) {
    if (that == null)
      return false;

    boolean this_present_viewNumber = true;
    boolean that_present_viewNumber = true;
    if (this_present_viewNumber || that_present_viewNumber) {
      if (!(this_present_viewNumber && that_present_viewNumber))
        return false;
      if (this.viewNumber != that.viewNumber)
        return false;
    }

    boolean this_present_commitNumber = true;
    boolean that_present_commitNumber = true;
    if (this_present_commitNumber || that_present_commitNumber) {
      if (!(this_present_commitNumber && that_present_commitNumber))
        return false;
      if (this.commitNumber != that.commitNumber)
        return false;
    }

    boolean this_present_retryCount = true;
    boolean that_present_retryCount = true;
    if (this_present_retryCount || that_present_retryCount) {
      if (!(this_present_retryCount && that_present_retryCount))
        return false;
      if (this.retryCount != that.retryCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_viewNumber = true;
    list.add(present_viewNumber);
    if (present_viewNumber)
      list.add(viewNumber);

    boolean present_commitNumber = true;
    list.add(present_commitNumber);
    if (present_commitNumber)
      list.add(commitNumber);

    boolean present_retryCount = true;
    list.add(present_retryCount);
    if (present_retryCount)
      list.add(retryCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(CommitParameter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetViewNumber()).compareTo(other.isSetViewNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewNumber, other.viewNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommitNumber()).compareTo(other.isSetCommitNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommitNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitNumber, other.commitNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryCount()).compareTo(other.isSetRetryCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryCount, other.retryCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommitParameter(");
    boolean first = true;

    sb.append("viewNumber:");
    sb.append(this.viewNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commitNumber:");
    sb.append(this.commitNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("retryCount:");
    sb.append(this.retryCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommitParameterStandardSchemeFactory implements SchemeFactory {
    public CommitParameterStandardScheme getScheme() {
      return new CommitParameterStandardScheme();
    }
  }

  private static class CommitParameterStandardScheme extends StandardScheme<CommitParameter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommitParameter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VIEW_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewNumber = iprot.readI32();
              struct.setViewNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMMIT_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commitNumber = iprot.readI32();
              struct.setCommitNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RETRY_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retryCount = iprot.readI32();
              struct.setRetryCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommitParameter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VIEW_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.viewNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COMMIT_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.commitNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RETRY_COUNT_FIELD_DESC);
      oprot.writeI32(struct.retryCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommitParameterTupleSchemeFactory implements SchemeFactory {
    public CommitParameterTupleScheme getScheme() {
      return new CommitParameterTupleScheme();
    }
  }

  private static class CommitParameterTupleScheme extends TupleScheme<CommitParameter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommitParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetViewNumber()) {
        optionals.set(0);
      }
      if (struct.isSetCommitNumber()) {
        optionals.set(1);
      }
      if (struct.isSetRetryCount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetViewNumber()) {
        oprot.writeI32(struct.viewNumber);
      }
      if (struct.isSetCommitNumber()) {
        oprot.writeI32(struct.commitNumber);
      }
      if (struct.isSetRetryCount()) {
        oprot.writeI32(struct.retryCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommitParameter struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.viewNumber = iprot.readI32();
        struct.setViewNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commitNumber = iprot.readI32();
        struct.setCommitNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.retryCount = iprot.readI32();
        struct.setRetryCountIsSet(true);
      }
    }
  }

}

