/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-12")
public class VRCodeService {

  public interface Iface {

    public RequestResponse rpcRequest(RequestParameter requestParameter) throws org.apache.thrift.TException;

    public PrepareResponse rpcPrepare(PrepareParameter prepareParameter) throws org.apache.thrift.TException;

    public CommitResponse rpcCommit(CommitParameter commitParameter) throws org.apache.thrift.TException;

    public StartViewChangeResponse rpcStartViewChange(StartViewChangeParameter startViewChangeParameter) throws org.apache.thrift.TException;

    public DoViewChangeResponse rpcDoViewChange(DoViewChangeParameter doViewChangeParameter) throws org.apache.thrift.TException;

    public StartViewResponse rpcStartView(StartViewParameter startViewParameter) throws org.apache.thrift.TException;

    public RecoveryResponse rpcRecovery(RecoveryParameter recoveryParameter) throws org.apache.thrift.TException;

    public GetStateResponse rpcGetState(GetStateParameter getStateParameter) throws org.apache.thrift.TException;

    public boolean ping() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void rpcRequest(RequestParameter requestParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcPrepare(PrepareParameter prepareParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcCommit(CommitParameter commitParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcStartViewChange(StartViewChangeParameter startViewChangeParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcDoViewChange(DoViewChangeParameter doViewChangeParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcStartView(StartViewParameter startViewParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcRecovery(RecoveryParameter recoveryParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcGetState(GetStateParameter getStateParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RequestResponse rpcRequest(RequestParameter requestParameter) throws org.apache.thrift.TException
    {
      send_rpcRequest(requestParameter);
      return recv_rpcRequest();
    }

    public void send_rpcRequest(RequestParameter requestParameter) throws org.apache.thrift.TException
    {
      rpcRequest_args args = new rpcRequest_args();
      args.setRequestParameter(requestParameter);
      sendBase("rpcRequest", args);
    }

    public RequestResponse recv_rpcRequest() throws org.apache.thrift.TException
    {
      rpcRequest_result result = new rpcRequest_result();
      receiveBase(result, "rpcRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcRequest failed: unknown result");
    }

    public PrepareResponse rpcPrepare(PrepareParameter prepareParameter) throws org.apache.thrift.TException
    {
      send_rpcPrepare(prepareParameter);
      return recv_rpcPrepare();
    }

    public void send_rpcPrepare(PrepareParameter prepareParameter) throws org.apache.thrift.TException
    {
      rpcPrepare_args args = new rpcPrepare_args();
      args.setPrepareParameter(prepareParameter);
      sendBase("rpcPrepare", args);
    }

    public PrepareResponse recv_rpcPrepare() throws org.apache.thrift.TException
    {
      rpcPrepare_result result = new rpcPrepare_result();
      receiveBase(result, "rpcPrepare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcPrepare failed: unknown result");
    }

    public CommitResponse rpcCommit(CommitParameter commitParameter) throws org.apache.thrift.TException
    {
      send_rpcCommit(commitParameter);
      return recv_rpcCommit();
    }

    public void send_rpcCommit(CommitParameter commitParameter) throws org.apache.thrift.TException
    {
      rpcCommit_args args = new rpcCommit_args();
      args.setCommitParameter(commitParameter);
      sendBase("rpcCommit", args);
    }

    public CommitResponse recv_rpcCommit() throws org.apache.thrift.TException
    {
      rpcCommit_result result = new rpcCommit_result();
      receiveBase(result, "rpcCommit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcCommit failed: unknown result");
    }

    public StartViewChangeResponse rpcStartViewChange(StartViewChangeParameter startViewChangeParameter) throws org.apache.thrift.TException
    {
      send_rpcStartViewChange(startViewChangeParameter);
      return recv_rpcStartViewChange();
    }

    public void send_rpcStartViewChange(StartViewChangeParameter startViewChangeParameter) throws org.apache.thrift.TException
    {
      rpcStartViewChange_args args = new rpcStartViewChange_args();
      args.setStartViewChangeParameter(startViewChangeParameter);
      sendBase("rpcStartViewChange", args);
    }

    public StartViewChangeResponse recv_rpcStartViewChange() throws org.apache.thrift.TException
    {
      rpcStartViewChange_result result = new rpcStartViewChange_result();
      receiveBase(result, "rpcStartViewChange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcStartViewChange failed: unknown result");
    }

    public DoViewChangeResponse rpcDoViewChange(DoViewChangeParameter doViewChangeParameter) throws org.apache.thrift.TException
    {
      send_rpcDoViewChange(doViewChangeParameter);
      return recv_rpcDoViewChange();
    }

    public void send_rpcDoViewChange(DoViewChangeParameter doViewChangeParameter) throws org.apache.thrift.TException
    {
      rpcDoViewChange_args args = new rpcDoViewChange_args();
      args.setDoViewChangeParameter(doViewChangeParameter);
      sendBase("rpcDoViewChange", args);
    }

    public DoViewChangeResponse recv_rpcDoViewChange() throws org.apache.thrift.TException
    {
      rpcDoViewChange_result result = new rpcDoViewChange_result();
      receiveBase(result, "rpcDoViewChange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcDoViewChange failed: unknown result");
    }

    public StartViewResponse rpcStartView(StartViewParameter startViewParameter) throws org.apache.thrift.TException
    {
      send_rpcStartView(startViewParameter);
      return recv_rpcStartView();
    }

    public void send_rpcStartView(StartViewParameter startViewParameter) throws org.apache.thrift.TException
    {
      rpcStartView_args args = new rpcStartView_args();
      args.setStartViewParameter(startViewParameter);
      sendBase("rpcStartView", args);
    }

    public StartViewResponse recv_rpcStartView() throws org.apache.thrift.TException
    {
      rpcStartView_result result = new rpcStartView_result();
      receiveBase(result, "rpcStartView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcStartView failed: unknown result");
    }

    public RecoveryResponse rpcRecovery(RecoveryParameter recoveryParameter) throws org.apache.thrift.TException
    {
      send_rpcRecovery(recoveryParameter);
      return recv_rpcRecovery();
    }

    public void send_rpcRecovery(RecoveryParameter recoveryParameter) throws org.apache.thrift.TException
    {
      rpcRecovery_args args = new rpcRecovery_args();
      args.setRecoveryParameter(recoveryParameter);
      sendBase("rpcRecovery", args);
    }

    public RecoveryResponse recv_rpcRecovery() throws org.apache.thrift.TException
    {
      rpcRecovery_result result = new rpcRecovery_result();
      receiveBase(result, "rpcRecovery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcRecovery failed: unknown result");
    }

    public GetStateResponse rpcGetState(GetStateParameter getStateParameter) throws org.apache.thrift.TException
    {
      send_rpcGetState(getStateParameter);
      return recv_rpcGetState();
    }

    public void send_rpcGetState(GetStateParameter getStateParameter) throws org.apache.thrift.TException
    {
      rpcGetState_args args = new rpcGetState_args();
      args.setGetStateParameter(getStateParameter);
      sendBase("rpcGetState", args);
    }

    public GetStateResponse recv_rpcGetState() throws org.apache.thrift.TException
    {
      rpcGetState_result result = new rpcGetState_result();
      receiveBase(result, "rpcGetState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcGetState failed: unknown result");
    }

    public boolean ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public boolean recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void rpcRequest(RequestParameter requestParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcRequest_call method_call = new rpcRequest_call(requestParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RequestParameter requestParameter;
      public rpcRequest_call(RequestParameter requestParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestParameter = requestParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcRequest_args args = new rpcRequest_args();
        args.setRequestParameter(requestParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RequestResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcRequest();
      }
    }

    public void rpcPrepare(PrepareParameter prepareParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcPrepare_call method_call = new rpcPrepare_call(prepareParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcPrepare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PrepareParameter prepareParameter;
      public rpcPrepare_call(PrepareParameter prepareParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prepareParameter = prepareParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcPrepare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcPrepare_args args = new rpcPrepare_args();
        args.setPrepareParameter(prepareParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PrepareResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcPrepare();
      }
    }

    public void rpcCommit(CommitParameter commitParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcCommit_call method_call = new rpcCommit_call(commitParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommitParameter commitParameter;
      public rpcCommit_call(CommitParameter commitParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commitParameter = commitParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcCommit_args args = new rpcCommit_args();
        args.setCommitParameter(commitParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CommitResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcCommit();
      }
    }

    public void rpcStartViewChange(StartViewChangeParameter startViewChangeParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcStartViewChange_call method_call = new rpcStartViewChange_call(startViewChangeParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcStartViewChange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StartViewChangeParameter startViewChangeParameter;
      public rpcStartViewChange_call(StartViewChangeParameter startViewChangeParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startViewChangeParameter = startViewChangeParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcStartViewChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcStartViewChange_args args = new rpcStartViewChange_args();
        args.setStartViewChangeParameter(startViewChangeParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StartViewChangeResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcStartViewChange();
      }
    }

    public void rpcDoViewChange(DoViewChangeParameter doViewChangeParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcDoViewChange_call method_call = new rpcDoViewChange_call(doViewChangeParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcDoViewChange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private DoViewChangeParameter doViewChangeParameter;
      public rpcDoViewChange_call(DoViewChangeParameter doViewChangeParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.doViewChangeParameter = doViewChangeParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcDoViewChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcDoViewChange_args args = new rpcDoViewChange_args();
        args.setDoViewChangeParameter(doViewChangeParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DoViewChangeResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcDoViewChange();
      }
    }

    public void rpcStartView(StartViewParameter startViewParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcStartView_call method_call = new rpcStartView_call(startViewParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcStartView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private StartViewParameter startViewParameter;
      public rpcStartView_call(StartViewParameter startViewParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.startViewParameter = startViewParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcStartView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcStartView_args args = new rpcStartView_args();
        args.setStartViewParameter(startViewParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StartViewResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcStartView();
      }
    }

    public void rpcRecovery(RecoveryParameter recoveryParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcRecovery_call method_call = new rpcRecovery_call(recoveryParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcRecovery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RecoveryParameter recoveryParameter;
      public rpcRecovery_call(RecoveryParameter recoveryParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.recoveryParameter = recoveryParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcRecovery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcRecovery_args args = new rpcRecovery_args();
        args.setRecoveryParameter(recoveryParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RecoveryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcRecovery();
      }
    }

    public void rpcGetState(GetStateParameter getStateParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcGetState_call method_call = new rpcGetState_call(getStateParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcGetState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private GetStateParameter getStateParameter;
      public rpcGetState_call(GetStateParameter getStateParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getStateParameter = getStateParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcGetState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcGetState_args args = new rpcGetState_args();
        args.setGetStateParameter(getStateParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetStateResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcGetState();
      }
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("rpcRequest", new rpcRequest());
      processMap.put("rpcPrepare", new rpcPrepare());
      processMap.put("rpcCommit", new rpcCommit());
      processMap.put("rpcStartViewChange", new rpcStartViewChange());
      processMap.put("rpcDoViewChange", new rpcDoViewChange());
      processMap.put("rpcStartView", new rpcStartView());
      processMap.put("rpcRecovery", new rpcRecovery());
      processMap.put("rpcGetState", new rpcGetState());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class rpcRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcRequest_args> {
      public rpcRequest() {
        super("rpcRequest");
      }

      public rpcRequest_args getEmptyArgsInstance() {
        return new rpcRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcRequest_result getResult(I iface, rpcRequest_args args) throws org.apache.thrift.TException {
        rpcRequest_result result = new rpcRequest_result();
        result.success = iface.rpcRequest(args.requestParameter);
        return result;
      }
    }

    public static class rpcPrepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcPrepare_args> {
      public rpcPrepare() {
        super("rpcPrepare");
      }

      public rpcPrepare_args getEmptyArgsInstance() {
        return new rpcPrepare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcPrepare_result getResult(I iface, rpcPrepare_args args) throws org.apache.thrift.TException {
        rpcPrepare_result result = new rpcPrepare_result();
        result.success = iface.rpcPrepare(args.prepareParameter);
        return result;
      }
    }

    public static class rpcCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcCommit_args> {
      public rpcCommit() {
        super("rpcCommit");
      }

      public rpcCommit_args getEmptyArgsInstance() {
        return new rpcCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcCommit_result getResult(I iface, rpcCommit_args args) throws org.apache.thrift.TException {
        rpcCommit_result result = new rpcCommit_result();
        result.success = iface.rpcCommit(args.commitParameter);
        return result;
      }
    }

    public static class rpcStartViewChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcStartViewChange_args> {
      public rpcStartViewChange() {
        super("rpcStartViewChange");
      }

      public rpcStartViewChange_args getEmptyArgsInstance() {
        return new rpcStartViewChange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcStartViewChange_result getResult(I iface, rpcStartViewChange_args args) throws org.apache.thrift.TException {
        rpcStartViewChange_result result = new rpcStartViewChange_result();
        result.success = iface.rpcStartViewChange(args.startViewChangeParameter);
        return result;
      }
    }

    public static class rpcDoViewChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcDoViewChange_args> {
      public rpcDoViewChange() {
        super("rpcDoViewChange");
      }

      public rpcDoViewChange_args getEmptyArgsInstance() {
        return new rpcDoViewChange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcDoViewChange_result getResult(I iface, rpcDoViewChange_args args) throws org.apache.thrift.TException {
        rpcDoViewChange_result result = new rpcDoViewChange_result();
        result.success = iface.rpcDoViewChange(args.doViewChangeParameter);
        return result;
      }
    }

    public static class rpcStartView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcStartView_args> {
      public rpcStartView() {
        super("rpcStartView");
      }

      public rpcStartView_args getEmptyArgsInstance() {
        return new rpcStartView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcStartView_result getResult(I iface, rpcStartView_args args) throws org.apache.thrift.TException {
        rpcStartView_result result = new rpcStartView_result();
        result.success = iface.rpcStartView(args.startViewParameter);
        return result;
      }
    }

    public static class rpcRecovery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcRecovery_args> {
      public rpcRecovery() {
        super("rpcRecovery");
      }

      public rpcRecovery_args getEmptyArgsInstance() {
        return new rpcRecovery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcRecovery_result getResult(I iface, rpcRecovery_args args) throws org.apache.thrift.TException {
        rpcRecovery_result result = new rpcRecovery_result();
        result.success = iface.rpcRecovery(args.recoveryParameter);
        return result;
      }
    }

    public static class rpcGetState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcGetState_args> {
      public rpcGetState() {
        super("rpcGetState");
      }

      public rpcGetState_args getEmptyArgsInstance() {
        return new rpcGetState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcGetState_result getResult(I iface, rpcGetState_args args) throws org.apache.thrift.TException {
        rpcGetState_result result = new rpcGetState_result();
        result.success = iface.rpcGetState(args.getStateParameter);
        return result;
      }
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("rpcRequest", new rpcRequest());
      processMap.put("rpcPrepare", new rpcPrepare());
      processMap.put("rpcCommit", new rpcCommit());
      processMap.put("rpcStartViewChange", new rpcStartViewChange());
      processMap.put("rpcDoViewChange", new rpcDoViewChange());
      processMap.put("rpcStartView", new rpcStartView());
      processMap.put("rpcRecovery", new rpcRecovery());
      processMap.put("rpcGetState", new rpcGetState());
      processMap.put("ping", new ping());
      return processMap;
    }

    public static class rpcRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcRequest_args, RequestResponse> {
      public rpcRequest() {
        super("rpcRequest");
      }

      public rpcRequest_args getEmptyArgsInstance() {
        return new rpcRequest_args();
      }

      public AsyncMethodCallback<RequestResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RequestResponse>() { 
          public void onComplete(RequestResponse o) {
            rpcRequest_result result = new rpcRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcRequest_result result = new rpcRequest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcRequest_args args, org.apache.thrift.async.AsyncMethodCallback<RequestResponse> resultHandler) throws TException {
        iface.rpcRequest(args.requestParameter,resultHandler);
      }
    }

    public static class rpcPrepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcPrepare_args, PrepareResponse> {
      public rpcPrepare() {
        super("rpcPrepare");
      }

      public rpcPrepare_args getEmptyArgsInstance() {
        return new rpcPrepare_args();
      }

      public AsyncMethodCallback<PrepareResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PrepareResponse>() { 
          public void onComplete(PrepareResponse o) {
            rpcPrepare_result result = new rpcPrepare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcPrepare_result result = new rpcPrepare_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcPrepare_args args, org.apache.thrift.async.AsyncMethodCallback<PrepareResponse> resultHandler) throws TException {
        iface.rpcPrepare(args.prepareParameter,resultHandler);
      }
    }

    public static class rpcCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcCommit_args, CommitResponse> {
      public rpcCommit() {
        super("rpcCommit");
      }

      public rpcCommit_args getEmptyArgsInstance() {
        return new rpcCommit_args();
      }

      public AsyncMethodCallback<CommitResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CommitResponse>() { 
          public void onComplete(CommitResponse o) {
            rpcCommit_result result = new rpcCommit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcCommit_result result = new rpcCommit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcCommit_args args, org.apache.thrift.async.AsyncMethodCallback<CommitResponse> resultHandler) throws TException {
        iface.rpcCommit(args.commitParameter,resultHandler);
      }
    }

    public static class rpcStartViewChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcStartViewChange_args, StartViewChangeResponse> {
      public rpcStartViewChange() {
        super("rpcStartViewChange");
      }

      public rpcStartViewChange_args getEmptyArgsInstance() {
        return new rpcStartViewChange_args();
      }

      public AsyncMethodCallback<StartViewChangeResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StartViewChangeResponse>() { 
          public void onComplete(StartViewChangeResponse o) {
            rpcStartViewChange_result result = new rpcStartViewChange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcStartViewChange_result result = new rpcStartViewChange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcStartViewChange_args args, org.apache.thrift.async.AsyncMethodCallback<StartViewChangeResponse> resultHandler) throws TException {
        iface.rpcStartViewChange(args.startViewChangeParameter,resultHandler);
      }
    }

    public static class rpcDoViewChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcDoViewChange_args, DoViewChangeResponse> {
      public rpcDoViewChange() {
        super("rpcDoViewChange");
      }

      public rpcDoViewChange_args getEmptyArgsInstance() {
        return new rpcDoViewChange_args();
      }

      public AsyncMethodCallback<DoViewChangeResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DoViewChangeResponse>() { 
          public void onComplete(DoViewChangeResponse o) {
            rpcDoViewChange_result result = new rpcDoViewChange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcDoViewChange_result result = new rpcDoViewChange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcDoViewChange_args args, org.apache.thrift.async.AsyncMethodCallback<DoViewChangeResponse> resultHandler) throws TException {
        iface.rpcDoViewChange(args.doViewChangeParameter,resultHandler);
      }
    }

    public static class rpcStartView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcStartView_args, StartViewResponse> {
      public rpcStartView() {
        super("rpcStartView");
      }

      public rpcStartView_args getEmptyArgsInstance() {
        return new rpcStartView_args();
      }

      public AsyncMethodCallback<StartViewResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StartViewResponse>() { 
          public void onComplete(StartViewResponse o) {
            rpcStartView_result result = new rpcStartView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcStartView_result result = new rpcStartView_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcStartView_args args, org.apache.thrift.async.AsyncMethodCallback<StartViewResponse> resultHandler) throws TException {
        iface.rpcStartView(args.startViewParameter,resultHandler);
      }
    }

    public static class rpcRecovery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcRecovery_args, RecoveryResponse> {
      public rpcRecovery() {
        super("rpcRecovery");
      }

      public rpcRecovery_args getEmptyArgsInstance() {
        return new rpcRecovery_args();
      }

      public AsyncMethodCallback<RecoveryResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RecoveryResponse>() { 
          public void onComplete(RecoveryResponse o) {
            rpcRecovery_result result = new rpcRecovery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcRecovery_result result = new rpcRecovery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcRecovery_args args, org.apache.thrift.async.AsyncMethodCallback<RecoveryResponse> resultHandler) throws TException {
        iface.rpcRecovery(args.recoveryParameter,resultHandler);
      }
    }

    public static class rpcGetState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcGetState_args, GetStateResponse> {
      public rpcGetState() {
        super("rpcGetState");
      }

      public rpcGetState_args getEmptyArgsInstance() {
        return new rpcGetState_args();
      }

      public AsyncMethodCallback<GetStateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetStateResponse>() { 
          public void onComplete(GetStateResponse o) {
            rpcGetState_result result = new rpcGetState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcGetState_result result = new rpcGetState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcGetState_args args, org.apache.thrift.async.AsyncMethodCallback<GetStateResponse> resultHandler) throws TException {
        iface.rpcGetState(args.getStateParameter,resultHandler);
      }
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Boolean> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ping_result result = new ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ping(resultHandler);
      }
    }

  }

  public static class rpcRequest_args implements org.apache.thrift.TBase<rpcRequest_args, rpcRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRequest_args");

    private static final org.apache.thrift.protocol.TField REQUEST_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRequest_argsTupleSchemeFactory());
    }

    public RequestParameter requestParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_PARAMETER((short)1, "requestParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_PARAMETER
            return REQUEST_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("requestParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRequest_args.class, metaDataMap);
    }

    public rpcRequest_args() {
    }

    public rpcRequest_args(
      RequestParameter requestParameter)
    {
      this();
      this.requestParameter = requestParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRequest_args(rpcRequest_args other) {
      if (other.isSetRequestParameter()) {
        this.requestParameter = new RequestParameter(other.requestParameter);
      }
    }

    public rpcRequest_args deepCopy() {
      return new rpcRequest_args(this);
    }

    @Override
    public void clear() {
      this.requestParameter = null;
    }

    public RequestParameter getRequestParameter() {
      return this.requestParameter;
    }

    public rpcRequest_args setRequestParameter(RequestParameter requestParameter) {
      this.requestParameter = requestParameter;
      return this;
    }

    public void unsetRequestParameter() {
      this.requestParameter = null;
    }

    /** Returns true if field requestParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestParameter() {
      return this.requestParameter != null;
    }

    public void setRequestParameterIsSet(boolean value) {
      if (!value) {
        this.requestParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_PARAMETER:
        if (value == null) {
          unsetRequestParameter();
        } else {
          setRequestParameter((RequestParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_PARAMETER:
        return getRequestParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_PARAMETER:
        return isSetRequestParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRequest_args)
        return this.equals((rpcRequest_args)that);
      return false;
    }

    public boolean equals(rpcRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_requestParameter = true && this.isSetRequestParameter();
      boolean that_present_requestParameter = true && that.isSetRequestParameter();
      if (this_present_requestParameter || that_present_requestParameter) {
        if (!(this_present_requestParameter && that_present_requestParameter))
          return false;
        if (!this.requestParameter.equals(that.requestParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestParameter = true && (isSetRequestParameter());
      list.add(present_requestParameter);
      if (present_requestParameter)
        list.add(requestParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestParameter()).compareTo(other.isSetRequestParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestParameter, other.requestParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRequest_args(");
      boolean first = true;

      sb.append("requestParameter:");
      if (this.requestParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.requestParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestParameter != null) {
        requestParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRequest_argsStandardSchemeFactory implements SchemeFactory {
      public rpcRequest_argsStandardScheme getScheme() {
        return new rpcRequest_argsStandardScheme();
      }
    }

    private static class rpcRequest_argsStandardScheme extends StandardScheme<rpcRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestParameter = new RequestParameter();
                struct.requestParameter.read(iprot);
                struct.setRequestParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestParameter != null) {
          oprot.writeFieldBegin(REQUEST_PARAMETER_FIELD_DESC);
          struct.requestParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRequest_argsTupleSchemeFactory implements SchemeFactory {
      public rpcRequest_argsTupleScheme getScheme() {
        return new rpcRequest_argsTupleScheme();
      }
    }

    private static class rpcRequest_argsTupleScheme extends TupleScheme<rpcRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestParameter()) {
          struct.requestParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestParameter = new RequestParameter();
          struct.requestParameter.read(iprot);
          struct.setRequestParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcRequest_result implements org.apache.thrift.TBase<rpcRequest_result, rpcRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRequest_resultTupleSchemeFactory());
    }

    public RequestResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRequest_result.class, metaDataMap);
    }

    public rpcRequest_result() {
    }

    public rpcRequest_result(
      RequestResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRequest_result(rpcRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new RequestResponse(other.success);
      }
    }

    public rpcRequest_result deepCopy() {
      return new rpcRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RequestResponse getSuccess() {
      return this.success;
    }

    public rpcRequest_result setSuccess(RequestResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RequestResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRequest_result)
        return this.equals((rpcRequest_result)that);
      return false;
    }

    public boolean equals(rpcRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRequest_resultStandardSchemeFactory implements SchemeFactory {
      public rpcRequest_resultStandardScheme getScheme() {
        return new rpcRequest_resultStandardScheme();
      }
    }

    private static class rpcRequest_resultStandardScheme extends StandardScheme<rpcRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RequestResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRequest_resultTupleSchemeFactory implements SchemeFactory {
      public rpcRequest_resultTupleScheme getScheme() {
        return new rpcRequest_resultTupleScheme();
      }
    }

    private static class rpcRequest_resultTupleScheme extends TupleScheme<rpcRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RequestResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcPrepare_args implements org.apache.thrift.TBase<rpcPrepare_args, rpcPrepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcPrepare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcPrepare_args");

    private static final org.apache.thrift.protocol.TField PREPARE_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("prepareParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcPrepare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcPrepare_argsTupleSchemeFactory());
    }

    public PrepareParameter prepareParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREPARE_PARAMETER((short)1, "prepareParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PREPARE_PARAMETER
            return PREPARE_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREPARE_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("prepareParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrepareParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcPrepare_args.class, metaDataMap);
    }

    public rpcPrepare_args() {
    }

    public rpcPrepare_args(
      PrepareParameter prepareParameter)
    {
      this();
      this.prepareParameter = prepareParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcPrepare_args(rpcPrepare_args other) {
      if (other.isSetPrepareParameter()) {
        this.prepareParameter = new PrepareParameter(other.prepareParameter);
      }
    }

    public rpcPrepare_args deepCopy() {
      return new rpcPrepare_args(this);
    }

    @Override
    public void clear() {
      this.prepareParameter = null;
    }

    public PrepareParameter getPrepareParameter() {
      return this.prepareParameter;
    }

    public rpcPrepare_args setPrepareParameter(PrepareParameter prepareParameter) {
      this.prepareParameter = prepareParameter;
      return this;
    }

    public void unsetPrepareParameter() {
      this.prepareParameter = null;
    }

    /** Returns true if field prepareParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetPrepareParameter() {
      return this.prepareParameter != null;
    }

    public void setPrepareParameterIsSet(boolean value) {
      if (!value) {
        this.prepareParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREPARE_PARAMETER:
        if (value == null) {
          unsetPrepareParameter();
        } else {
          setPrepareParameter((PrepareParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREPARE_PARAMETER:
        return getPrepareParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREPARE_PARAMETER:
        return isSetPrepareParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcPrepare_args)
        return this.equals((rpcPrepare_args)that);
      return false;
    }

    public boolean equals(rpcPrepare_args that) {
      if (that == null)
        return false;

      boolean this_present_prepareParameter = true && this.isSetPrepareParameter();
      boolean that_present_prepareParameter = true && that.isSetPrepareParameter();
      if (this_present_prepareParameter || that_present_prepareParameter) {
        if (!(this_present_prepareParameter && that_present_prepareParameter))
          return false;
        if (!this.prepareParameter.equals(that.prepareParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_prepareParameter = true && (isSetPrepareParameter());
      list.add(present_prepareParameter);
      if (present_prepareParameter)
        list.add(prepareParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcPrepare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPrepareParameter()).compareTo(other.isSetPrepareParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrepareParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepareParameter, other.prepareParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcPrepare_args(");
      boolean first = true;

      sb.append("prepareParameter:");
      if (this.prepareParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.prepareParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (prepareParameter != null) {
        prepareParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcPrepare_argsStandardSchemeFactory implements SchemeFactory {
      public rpcPrepare_argsStandardScheme getScheme() {
        return new rpcPrepare_argsStandardScheme();
      }
    }

    private static class rpcPrepare_argsStandardScheme extends StandardScheme<rpcPrepare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PREPARE_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.prepareParameter = new PrepareParameter();
                struct.prepareParameter.read(iprot);
                struct.setPrepareParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prepareParameter != null) {
          oprot.writeFieldBegin(PREPARE_PARAMETER_FIELD_DESC);
          struct.prepareParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcPrepare_argsTupleSchemeFactory implements SchemeFactory {
      public rpcPrepare_argsTupleScheme getScheme() {
        return new rpcPrepare_argsTupleScheme();
      }
    }

    private static class rpcPrepare_argsTupleScheme extends TupleScheme<rpcPrepare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrepareParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPrepareParameter()) {
          struct.prepareParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.prepareParameter = new PrepareParameter();
          struct.prepareParameter.read(iprot);
          struct.setPrepareParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcPrepare_result implements org.apache.thrift.TBase<rpcPrepare_result, rpcPrepare_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcPrepare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcPrepare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcPrepare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcPrepare_resultTupleSchemeFactory());
    }

    public PrepareResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrepareResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcPrepare_result.class, metaDataMap);
    }

    public rpcPrepare_result() {
    }

    public rpcPrepare_result(
      PrepareResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcPrepare_result(rpcPrepare_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrepareResponse(other.success);
      }
    }

    public rpcPrepare_result deepCopy() {
      return new rpcPrepare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PrepareResponse getSuccess() {
      return this.success;
    }

    public rpcPrepare_result setSuccess(PrepareResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrepareResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcPrepare_result)
        return this.equals((rpcPrepare_result)that);
      return false;
    }

    public boolean equals(rpcPrepare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcPrepare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcPrepare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcPrepare_resultStandardSchemeFactory implements SchemeFactory {
      public rpcPrepare_resultStandardScheme getScheme() {
        return new rpcPrepare_resultStandardScheme();
      }
    }

    private static class rpcPrepare_resultStandardScheme extends StandardScheme<rpcPrepare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrepareResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcPrepare_resultTupleSchemeFactory implements SchemeFactory {
      public rpcPrepare_resultTupleScheme getScheme() {
        return new rpcPrepare_resultTupleScheme();
      }
    }

    private static class rpcPrepare_resultTupleScheme extends TupleScheme<rpcPrepare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PrepareResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcCommit_args implements org.apache.thrift.TBase<rpcCommit_args, rpcCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcCommit_args");

    private static final org.apache.thrift.protocol.TField COMMIT_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("commitParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcCommit_argsTupleSchemeFactory());
    }

    public CommitParameter commitParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMIT_PARAMETER((short)1, "commitParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMIT_PARAMETER
            return COMMIT_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMIT_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("commitParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommitParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcCommit_args.class, metaDataMap);
    }

    public rpcCommit_args() {
    }

    public rpcCommit_args(
      CommitParameter commitParameter)
    {
      this();
      this.commitParameter = commitParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcCommit_args(rpcCommit_args other) {
      if (other.isSetCommitParameter()) {
        this.commitParameter = new CommitParameter(other.commitParameter);
      }
    }

    public rpcCommit_args deepCopy() {
      return new rpcCommit_args(this);
    }

    @Override
    public void clear() {
      this.commitParameter = null;
    }

    public CommitParameter getCommitParameter() {
      return this.commitParameter;
    }

    public rpcCommit_args setCommitParameter(CommitParameter commitParameter) {
      this.commitParameter = commitParameter;
      return this;
    }

    public void unsetCommitParameter() {
      this.commitParameter = null;
    }

    /** Returns true if field commitParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetCommitParameter() {
      return this.commitParameter != null;
    }

    public void setCommitParameterIsSet(boolean value) {
      if (!value) {
        this.commitParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMIT_PARAMETER:
        if (value == null) {
          unsetCommitParameter();
        } else {
          setCommitParameter((CommitParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMIT_PARAMETER:
        return getCommitParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMIT_PARAMETER:
        return isSetCommitParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcCommit_args)
        return this.equals((rpcCommit_args)that);
      return false;
    }

    public boolean equals(rpcCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_commitParameter = true && this.isSetCommitParameter();
      boolean that_present_commitParameter = true && that.isSetCommitParameter();
      if (this_present_commitParameter || that_present_commitParameter) {
        if (!(this_present_commitParameter && that_present_commitParameter))
          return false;
        if (!this.commitParameter.equals(that.commitParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commitParameter = true && (isSetCommitParameter());
      list.add(present_commitParameter);
      if (present_commitParameter)
        list.add(commitParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommitParameter()).compareTo(other.isSetCommitParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommitParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitParameter, other.commitParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcCommit_args(");
      boolean first = true;

      sb.append("commitParameter:");
      if (this.commitParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.commitParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commitParameter != null) {
        commitParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcCommit_argsStandardSchemeFactory implements SchemeFactory {
      public rpcCommit_argsStandardScheme getScheme() {
        return new rpcCommit_argsStandardScheme();
      }
    }

    private static class rpcCommit_argsStandardScheme extends StandardScheme<rpcCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMIT_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commitParameter = new CommitParameter();
                struct.commitParameter.read(iprot);
                struct.setCommitParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commitParameter != null) {
          oprot.writeFieldBegin(COMMIT_PARAMETER_FIELD_DESC);
          struct.commitParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcCommit_argsTupleSchemeFactory implements SchemeFactory {
      public rpcCommit_argsTupleScheme getScheme() {
        return new rpcCommit_argsTupleScheme();
      }
    }

    private static class rpcCommit_argsTupleScheme extends TupleScheme<rpcCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommitParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommitParameter()) {
          struct.commitParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commitParameter = new CommitParameter();
          struct.commitParameter.read(iprot);
          struct.setCommitParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcCommit_result implements org.apache.thrift.TBase<rpcCommit_result, rpcCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcCommit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcCommit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcCommit_resultTupleSchemeFactory());
    }

    public CommitResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommitResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcCommit_result.class, metaDataMap);
    }

    public rpcCommit_result() {
    }

    public rpcCommit_result(
      CommitResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcCommit_result(rpcCommit_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommitResponse(other.success);
      }
    }

    public rpcCommit_result deepCopy() {
      return new rpcCommit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CommitResponse getSuccess() {
      return this.success;
    }

    public rpcCommit_result setSuccess(CommitResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommitResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcCommit_result)
        return this.equals((rpcCommit_result)that);
      return false;
    }

    public boolean equals(rpcCommit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcCommit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcCommit_resultStandardSchemeFactory implements SchemeFactory {
      public rpcCommit_resultStandardScheme getScheme() {
        return new rpcCommit_resultStandardScheme();
      }
    }

    private static class rpcCommit_resultStandardScheme extends StandardScheme<rpcCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommitResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcCommit_resultTupleSchemeFactory implements SchemeFactory {
      public rpcCommit_resultTupleScheme getScheme() {
        return new rpcCommit_resultTupleScheme();
      }
    }

    private static class rpcCommit_resultTupleScheme extends TupleScheme<rpcCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CommitResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcStartViewChange_args implements org.apache.thrift.TBase<rpcStartViewChange_args, rpcStartViewChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartViewChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartViewChange_args");

    private static final org.apache.thrift.protocol.TField START_VIEW_CHANGE_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("startViewChangeParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartViewChange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartViewChange_argsTupleSchemeFactory());
    }

    public StartViewChangeParameter startViewChangeParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_VIEW_CHANGE_PARAMETER((short)1, "startViewChangeParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_VIEW_CHANGE_PARAMETER
            return START_VIEW_CHANGE_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_VIEW_CHANGE_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("startViewChangeParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartViewChangeParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartViewChange_args.class, metaDataMap);
    }

    public rpcStartViewChange_args() {
    }

    public rpcStartViewChange_args(
      StartViewChangeParameter startViewChangeParameter)
    {
      this();
      this.startViewChangeParameter = startViewChangeParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartViewChange_args(rpcStartViewChange_args other) {
      if (other.isSetStartViewChangeParameter()) {
        this.startViewChangeParameter = new StartViewChangeParameter(other.startViewChangeParameter);
      }
    }

    public rpcStartViewChange_args deepCopy() {
      return new rpcStartViewChange_args(this);
    }

    @Override
    public void clear() {
      this.startViewChangeParameter = null;
    }

    public StartViewChangeParameter getStartViewChangeParameter() {
      return this.startViewChangeParameter;
    }

    public rpcStartViewChange_args setStartViewChangeParameter(StartViewChangeParameter startViewChangeParameter) {
      this.startViewChangeParameter = startViewChangeParameter;
      return this;
    }

    public void unsetStartViewChangeParameter() {
      this.startViewChangeParameter = null;
    }

    /** Returns true if field startViewChangeParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetStartViewChangeParameter() {
      return this.startViewChangeParameter != null;
    }

    public void setStartViewChangeParameterIsSet(boolean value) {
      if (!value) {
        this.startViewChangeParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_VIEW_CHANGE_PARAMETER:
        if (value == null) {
          unsetStartViewChangeParameter();
        } else {
          setStartViewChangeParameter((StartViewChangeParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_VIEW_CHANGE_PARAMETER:
        return getStartViewChangeParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_VIEW_CHANGE_PARAMETER:
        return isSetStartViewChangeParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartViewChange_args)
        return this.equals((rpcStartViewChange_args)that);
      return false;
    }

    public boolean equals(rpcStartViewChange_args that) {
      if (that == null)
        return false;

      boolean this_present_startViewChangeParameter = true && this.isSetStartViewChangeParameter();
      boolean that_present_startViewChangeParameter = true && that.isSetStartViewChangeParameter();
      if (this_present_startViewChangeParameter || that_present_startViewChangeParameter) {
        if (!(this_present_startViewChangeParameter && that_present_startViewChangeParameter))
          return false;
        if (!this.startViewChangeParameter.equals(that.startViewChangeParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startViewChangeParameter = true && (isSetStartViewChangeParameter());
      list.add(present_startViewChangeParameter);
      if (present_startViewChangeParameter)
        list.add(startViewChangeParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartViewChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartViewChangeParameter()).compareTo(other.isSetStartViewChangeParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartViewChangeParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startViewChangeParameter, other.startViewChangeParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartViewChange_args(");
      boolean first = true;

      sb.append("startViewChangeParameter:");
      if (this.startViewChangeParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.startViewChangeParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (startViewChangeParameter != null) {
        startViewChangeParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartViewChange_argsStandardSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_argsStandardScheme getScheme() {
        return new rpcStartViewChange_argsStandardScheme();
      }
    }

    private static class rpcStartViewChange_argsStandardScheme extends StandardScheme<rpcStartViewChange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_VIEW_CHANGE_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.startViewChangeParameter = new StartViewChangeParameter();
                struct.startViewChangeParameter.read(iprot);
                struct.setStartViewChangeParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startViewChangeParameter != null) {
          oprot.writeFieldBegin(START_VIEW_CHANGE_PARAMETER_FIELD_DESC);
          struct.startViewChangeParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartViewChange_argsTupleSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_argsTupleScheme getScheme() {
        return new rpcStartViewChange_argsTupleScheme();
      }
    }

    private static class rpcStartViewChange_argsTupleScheme extends TupleScheme<rpcStartViewChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartViewChangeParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStartViewChangeParameter()) {
          struct.startViewChangeParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.startViewChangeParameter = new StartViewChangeParameter();
          struct.startViewChangeParameter.read(iprot);
          struct.setStartViewChangeParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcStartViewChange_result implements org.apache.thrift.TBase<rpcStartViewChange_result, rpcStartViewChange_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartViewChange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartViewChange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartViewChange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartViewChange_resultTupleSchemeFactory());
    }

    public StartViewChangeResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartViewChangeResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartViewChange_result.class, metaDataMap);
    }

    public rpcStartViewChange_result() {
    }

    public rpcStartViewChange_result(
      StartViewChangeResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartViewChange_result(rpcStartViewChange_result other) {
      if (other.isSetSuccess()) {
        this.success = new StartViewChangeResponse(other.success);
      }
    }

    public rpcStartViewChange_result deepCopy() {
      return new rpcStartViewChange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StartViewChangeResponse getSuccess() {
      return this.success;
    }

    public rpcStartViewChange_result setSuccess(StartViewChangeResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StartViewChangeResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartViewChange_result)
        return this.equals((rpcStartViewChange_result)that);
      return false;
    }

    public boolean equals(rpcStartViewChange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartViewChange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartViewChange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartViewChange_resultStandardSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_resultStandardScheme getScheme() {
        return new rpcStartViewChange_resultStandardScheme();
      }
    }

    private static class rpcStartViewChange_resultStandardScheme extends StandardScheme<rpcStartViewChange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StartViewChangeResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartViewChange_resultTupleSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_resultTupleScheme getScheme() {
        return new rpcStartViewChange_resultTupleScheme();
      }
    }

    private static class rpcStartViewChange_resultTupleScheme extends TupleScheme<rpcStartViewChange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StartViewChangeResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcDoViewChange_args implements org.apache.thrift.TBase<rpcDoViewChange_args, rpcDoViewChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcDoViewChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcDoViewChange_args");

    private static final org.apache.thrift.protocol.TField DO_VIEW_CHANGE_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("doViewChangeParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcDoViewChange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcDoViewChange_argsTupleSchemeFactory());
    }

    public DoViewChangeParameter doViewChangeParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DO_VIEW_CHANGE_PARAMETER((short)1, "doViewChangeParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DO_VIEW_CHANGE_PARAMETER
            return DO_VIEW_CHANGE_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DO_VIEW_CHANGE_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("doViewChangeParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DoViewChangeParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcDoViewChange_args.class, metaDataMap);
    }

    public rpcDoViewChange_args() {
    }

    public rpcDoViewChange_args(
      DoViewChangeParameter doViewChangeParameter)
    {
      this();
      this.doViewChangeParameter = doViewChangeParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcDoViewChange_args(rpcDoViewChange_args other) {
      if (other.isSetDoViewChangeParameter()) {
        this.doViewChangeParameter = new DoViewChangeParameter(other.doViewChangeParameter);
      }
    }

    public rpcDoViewChange_args deepCopy() {
      return new rpcDoViewChange_args(this);
    }

    @Override
    public void clear() {
      this.doViewChangeParameter = null;
    }

    public DoViewChangeParameter getDoViewChangeParameter() {
      return this.doViewChangeParameter;
    }

    public rpcDoViewChange_args setDoViewChangeParameter(DoViewChangeParameter doViewChangeParameter) {
      this.doViewChangeParameter = doViewChangeParameter;
      return this;
    }

    public void unsetDoViewChangeParameter() {
      this.doViewChangeParameter = null;
    }

    /** Returns true if field doViewChangeParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetDoViewChangeParameter() {
      return this.doViewChangeParameter != null;
    }

    public void setDoViewChangeParameterIsSet(boolean value) {
      if (!value) {
        this.doViewChangeParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DO_VIEW_CHANGE_PARAMETER:
        if (value == null) {
          unsetDoViewChangeParameter();
        } else {
          setDoViewChangeParameter((DoViewChangeParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DO_VIEW_CHANGE_PARAMETER:
        return getDoViewChangeParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DO_VIEW_CHANGE_PARAMETER:
        return isSetDoViewChangeParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcDoViewChange_args)
        return this.equals((rpcDoViewChange_args)that);
      return false;
    }

    public boolean equals(rpcDoViewChange_args that) {
      if (that == null)
        return false;

      boolean this_present_doViewChangeParameter = true && this.isSetDoViewChangeParameter();
      boolean that_present_doViewChangeParameter = true && that.isSetDoViewChangeParameter();
      if (this_present_doViewChangeParameter || that_present_doViewChangeParameter) {
        if (!(this_present_doViewChangeParameter && that_present_doViewChangeParameter))
          return false;
        if (!this.doViewChangeParameter.equals(that.doViewChangeParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_doViewChangeParameter = true && (isSetDoViewChangeParameter());
      list.add(present_doViewChangeParameter);
      if (present_doViewChangeParameter)
        list.add(doViewChangeParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcDoViewChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDoViewChangeParameter()).compareTo(other.isSetDoViewChangeParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoViewChangeParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doViewChangeParameter, other.doViewChangeParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcDoViewChange_args(");
      boolean first = true;

      sb.append("doViewChangeParameter:");
      if (this.doViewChangeParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.doViewChangeParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (doViewChangeParameter != null) {
        doViewChangeParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcDoViewChange_argsStandardSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_argsStandardScheme getScheme() {
        return new rpcDoViewChange_argsStandardScheme();
      }
    }

    private static class rpcDoViewChange_argsStandardScheme extends StandardScheme<rpcDoViewChange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DO_VIEW_CHANGE_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.doViewChangeParameter = new DoViewChangeParameter();
                struct.doViewChangeParameter.read(iprot);
                struct.setDoViewChangeParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.doViewChangeParameter != null) {
          oprot.writeFieldBegin(DO_VIEW_CHANGE_PARAMETER_FIELD_DESC);
          struct.doViewChangeParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcDoViewChange_argsTupleSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_argsTupleScheme getScheme() {
        return new rpcDoViewChange_argsTupleScheme();
      }
    }

    private static class rpcDoViewChange_argsTupleScheme extends TupleScheme<rpcDoViewChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDoViewChangeParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDoViewChangeParameter()) {
          struct.doViewChangeParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.doViewChangeParameter = new DoViewChangeParameter();
          struct.doViewChangeParameter.read(iprot);
          struct.setDoViewChangeParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcDoViewChange_result implements org.apache.thrift.TBase<rpcDoViewChange_result, rpcDoViewChange_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcDoViewChange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcDoViewChange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcDoViewChange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcDoViewChange_resultTupleSchemeFactory());
    }

    public DoViewChangeResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DoViewChangeResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcDoViewChange_result.class, metaDataMap);
    }

    public rpcDoViewChange_result() {
    }

    public rpcDoViewChange_result(
      DoViewChangeResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcDoViewChange_result(rpcDoViewChange_result other) {
      if (other.isSetSuccess()) {
        this.success = new DoViewChangeResponse(other.success);
      }
    }

    public rpcDoViewChange_result deepCopy() {
      return new rpcDoViewChange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DoViewChangeResponse getSuccess() {
      return this.success;
    }

    public rpcDoViewChange_result setSuccess(DoViewChangeResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DoViewChangeResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcDoViewChange_result)
        return this.equals((rpcDoViewChange_result)that);
      return false;
    }

    public boolean equals(rpcDoViewChange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcDoViewChange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcDoViewChange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcDoViewChange_resultStandardSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_resultStandardScheme getScheme() {
        return new rpcDoViewChange_resultStandardScheme();
      }
    }

    private static class rpcDoViewChange_resultStandardScheme extends StandardScheme<rpcDoViewChange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DoViewChangeResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcDoViewChange_resultTupleSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_resultTupleScheme getScheme() {
        return new rpcDoViewChange_resultTupleScheme();
      }
    }

    private static class rpcDoViewChange_resultTupleScheme extends TupleScheme<rpcDoViewChange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DoViewChangeResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcStartView_args implements org.apache.thrift.TBase<rpcStartView_args, rpcStartView_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartView_args");

    private static final org.apache.thrift.protocol.TField START_VIEW_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("startViewParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartView_argsTupleSchemeFactory());
    }

    public StartViewParameter startViewParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      START_VIEW_PARAMETER((short)1, "startViewParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // START_VIEW_PARAMETER
            return START_VIEW_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.START_VIEW_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("startViewParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartViewParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartView_args.class, metaDataMap);
    }

    public rpcStartView_args() {
    }

    public rpcStartView_args(
      StartViewParameter startViewParameter)
    {
      this();
      this.startViewParameter = startViewParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartView_args(rpcStartView_args other) {
      if (other.isSetStartViewParameter()) {
        this.startViewParameter = new StartViewParameter(other.startViewParameter);
      }
    }

    public rpcStartView_args deepCopy() {
      return new rpcStartView_args(this);
    }

    @Override
    public void clear() {
      this.startViewParameter = null;
    }

    public StartViewParameter getStartViewParameter() {
      return this.startViewParameter;
    }

    public rpcStartView_args setStartViewParameter(StartViewParameter startViewParameter) {
      this.startViewParameter = startViewParameter;
      return this;
    }

    public void unsetStartViewParameter() {
      this.startViewParameter = null;
    }

    /** Returns true if field startViewParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetStartViewParameter() {
      return this.startViewParameter != null;
    }

    public void setStartViewParameterIsSet(boolean value) {
      if (!value) {
        this.startViewParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case START_VIEW_PARAMETER:
        if (value == null) {
          unsetStartViewParameter();
        } else {
          setStartViewParameter((StartViewParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case START_VIEW_PARAMETER:
        return getStartViewParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case START_VIEW_PARAMETER:
        return isSetStartViewParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartView_args)
        return this.equals((rpcStartView_args)that);
      return false;
    }

    public boolean equals(rpcStartView_args that) {
      if (that == null)
        return false;

      boolean this_present_startViewParameter = true && this.isSetStartViewParameter();
      boolean that_present_startViewParameter = true && that.isSetStartViewParameter();
      if (this_present_startViewParameter || that_present_startViewParameter) {
        if (!(this_present_startViewParameter && that_present_startViewParameter))
          return false;
        if (!this.startViewParameter.equals(that.startViewParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_startViewParameter = true && (isSetStartViewParameter());
      list.add(present_startViewParameter);
      if (present_startViewParameter)
        list.add(startViewParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetStartViewParameter()).compareTo(other.isSetStartViewParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartViewParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startViewParameter, other.startViewParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartView_args(");
      boolean first = true;

      sb.append("startViewParameter:");
      if (this.startViewParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.startViewParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (startViewParameter != null) {
        startViewParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartView_argsStandardSchemeFactory implements SchemeFactory {
      public rpcStartView_argsStandardScheme getScheme() {
        return new rpcStartView_argsStandardScheme();
      }
    }

    private static class rpcStartView_argsStandardScheme extends StandardScheme<rpcStartView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // START_VIEW_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.startViewParameter = new StartViewParameter();
                struct.startViewParameter.read(iprot);
                struct.setStartViewParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.startViewParameter != null) {
          oprot.writeFieldBegin(START_VIEW_PARAMETER_FIELD_DESC);
          struct.startViewParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartView_argsTupleSchemeFactory implements SchemeFactory {
      public rpcStartView_argsTupleScheme getScheme() {
        return new rpcStartView_argsTupleScheme();
      }
    }

    private static class rpcStartView_argsTupleScheme extends TupleScheme<rpcStartView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetStartViewParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetStartViewParameter()) {
          struct.startViewParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.startViewParameter = new StartViewParameter();
          struct.startViewParameter.read(iprot);
          struct.setStartViewParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcStartView_result implements org.apache.thrift.TBase<rpcStartView_result, rpcStartView_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartView_resultTupleSchemeFactory());
    }

    public StartViewResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartViewResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartView_result.class, metaDataMap);
    }

    public rpcStartView_result() {
    }

    public rpcStartView_result(
      StartViewResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartView_result(rpcStartView_result other) {
      if (other.isSetSuccess()) {
        this.success = new StartViewResponse(other.success);
      }
    }

    public rpcStartView_result deepCopy() {
      return new rpcStartView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StartViewResponse getSuccess() {
      return this.success;
    }

    public rpcStartView_result setSuccess(StartViewResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StartViewResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartView_result)
        return this.equals((rpcStartView_result)that);
      return false;
    }

    public boolean equals(rpcStartView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartView_resultStandardSchemeFactory implements SchemeFactory {
      public rpcStartView_resultStandardScheme getScheme() {
        return new rpcStartView_resultStandardScheme();
      }
    }

    private static class rpcStartView_resultStandardScheme extends StandardScheme<rpcStartView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StartViewResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartView_resultTupleSchemeFactory implements SchemeFactory {
      public rpcStartView_resultTupleScheme getScheme() {
        return new rpcStartView_resultTupleScheme();
      }
    }

    private static class rpcStartView_resultTupleScheme extends TupleScheme<rpcStartView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StartViewResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcRecovery_args implements org.apache.thrift.TBase<rpcRecovery_args, rpcRecovery_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRecovery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRecovery_args");

    private static final org.apache.thrift.protocol.TField RECOVERY_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("recoveryParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRecovery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRecovery_argsTupleSchemeFactory());
    }

    public RecoveryParameter recoveryParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECOVERY_PARAMETER((short)1, "recoveryParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECOVERY_PARAMETER
            return RECOVERY_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECOVERY_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("recoveryParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecoveryParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRecovery_args.class, metaDataMap);
    }

    public rpcRecovery_args() {
    }

    public rpcRecovery_args(
      RecoveryParameter recoveryParameter)
    {
      this();
      this.recoveryParameter = recoveryParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRecovery_args(rpcRecovery_args other) {
      if (other.isSetRecoveryParameter()) {
        this.recoveryParameter = new RecoveryParameter(other.recoveryParameter);
      }
    }

    public rpcRecovery_args deepCopy() {
      return new rpcRecovery_args(this);
    }

    @Override
    public void clear() {
      this.recoveryParameter = null;
    }

    public RecoveryParameter getRecoveryParameter() {
      return this.recoveryParameter;
    }

    public rpcRecovery_args setRecoveryParameter(RecoveryParameter recoveryParameter) {
      this.recoveryParameter = recoveryParameter;
      return this;
    }

    public void unsetRecoveryParameter() {
      this.recoveryParameter = null;
    }

    /** Returns true if field recoveryParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetRecoveryParameter() {
      return this.recoveryParameter != null;
    }

    public void setRecoveryParameterIsSet(boolean value) {
      if (!value) {
        this.recoveryParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECOVERY_PARAMETER:
        if (value == null) {
          unsetRecoveryParameter();
        } else {
          setRecoveryParameter((RecoveryParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECOVERY_PARAMETER:
        return getRecoveryParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECOVERY_PARAMETER:
        return isSetRecoveryParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRecovery_args)
        return this.equals((rpcRecovery_args)that);
      return false;
    }

    public boolean equals(rpcRecovery_args that) {
      if (that == null)
        return false;

      boolean this_present_recoveryParameter = true && this.isSetRecoveryParameter();
      boolean that_present_recoveryParameter = true && that.isSetRecoveryParameter();
      if (this_present_recoveryParameter || that_present_recoveryParameter) {
        if (!(this_present_recoveryParameter && that_present_recoveryParameter))
          return false;
        if (!this.recoveryParameter.equals(that.recoveryParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_recoveryParameter = true && (isSetRecoveryParameter());
      list.add(present_recoveryParameter);
      if (present_recoveryParameter)
        list.add(recoveryParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRecovery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRecoveryParameter()).compareTo(other.isSetRecoveryParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecoveryParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recoveryParameter, other.recoveryParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRecovery_args(");
      boolean first = true;

      sb.append("recoveryParameter:");
      if (this.recoveryParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.recoveryParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (recoveryParameter != null) {
        recoveryParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRecovery_argsStandardSchemeFactory implements SchemeFactory {
      public rpcRecovery_argsStandardScheme getScheme() {
        return new rpcRecovery_argsStandardScheme();
      }
    }

    private static class rpcRecovery_argsStandardScheme extends StandardScheme<rpcRecovery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECOVERY_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.recoveryParameter = new RecoveryParameter();
                struct.recoveryParameter.read(iprot);
                struct.setRecoveryParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.recoveryParameter != null) {
          oprot.writeFieldBegin(RECOVERY_PARAMETER_FIELD_DESC);
          struct.recoveryParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRecovery_argsTupleSchemeFactory implements SchemeFactory {
      public rpcRecovery_argsTupleScheme getScheme() {
        return new rpcRecovery_argsTupleScheme();
      }
    }

    private static class rpcRecovery_argsTupleScheme extends TupleScheme<rpcRecovery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRecoveryParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRecoveryParameter()) {
          struct.recoveryParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.recoveryParameter = new RecoveryParameter();
          struct.recoveryParameter.read(iprot);
          struct.setRecoveryParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcRecovery_result implements org.apache.thrift.TBase<rpcRecovery_result, rpcRecovery_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRecovery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRecovery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRecovery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRecovery_resultTupleSchemeFactory());
    }

    public RecoveryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecoveryResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRecovery_result.class, metaDataMap);
    }

    public rpcRecovery_result() {
    }

    public rpcRecovery_result(
      RecoveryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRecovery_result(rpcRecovery_result other) {
      if (other.isSetSuccess()) {
        this.success = new RecoveryResponse(other.success);
      }
    }

    public rpcRecovery_result deepCopy() {
      return new rpcRecovery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RecoveryResponse getSuccess() {
      return this.success;
    }

    public rpcRecovery_result setSuccess(RecoveryResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RecoveryResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRecovery_result)
        return this.equals((rpcRecovery_result)that);
      return false;
    }

    public boolean equals(rpcRecovery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRecovery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRecovery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRecovery_resultStandardSchemeFactory implements SchemeFactory {
      public rpcRecovery_resultStandardScheme getScheme() {
        return new rpcRecovery_resultStandardScheme();
      }
    }

    private static class rpcRecovery_resultStandardScheme extends StandardScheme<rpcRecovery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RecoveryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRecovery_resultTupleSchemeFactory implements SchemeFactory {
      public rpcRecovery_resultTupleScheme getScheme() {
        return new rpcRecovery_resultTupleScheme();
      }
    }

    private static class rpcRecovery_resultTupleScheme extends TupleScheme<rpcRecovery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RecoveryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcGetState_args implements org.apache.thrift.TBase<rpcGetState_args, rpcGetState_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcGetState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcGetState_args");

    private static final org.apache.thrift.protocol.TField GET_STATE_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("getStateParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcGetState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcGetState_argsTupleSchemeFactory());
    }

    public GetStateParameter getStateParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_STATE_PARAMETER((short)1, "getStateParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_STATE_PARAMETER
            return GET_STATE_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_STATE_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("getStateParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetStateParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcGetState_args.class, metaDataMap);
    }

    public rpcGetState_args() {
    }

    public rpcGetState_args(
      GetStateParameter getStateParameter)
    {
      this();
      this.getStateParameter = getStateParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcGetState_args(rpcGetState_args other) {
      if (other.isSetGetStateParameter()) {
        this.getStateParameter = new GetStateParameter(other.getStateParameter);
      }
    }

    public rpcGetState_args deepCopy() {
      return new rpcGetState_args(this);
    }

    @Override
    public void clear() {
      this.getStateParameter = null;
    }

    public GetStateParameter getGetStateParameter() {
      return this.getStateParameter;
    }

    public rpcGetState_args setGetStateParameter(GetStateParameter getStateParameter) {
      this.getStateParameter = getStateParameter;
      return this;
    }

    public void unsetGetStateParameter() {
      this.getStateParameter = null;
    }

    /** Returns true if field getStateParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetGetStateParameter() {
      return this.getStateParameter != null;
    }

    public void setGetStateParameterIsSet(boolean value) {
      if (!value) {
        this.getStateParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_STATE_PARAMETER:
        if (value == null) {
          unsetGetStateParameter();
        } else {
          setGetStateParameter((GetStateParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_STATE_PARAMETER:
        return getGetStateParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_STATE_PARAMETER:
        return isSetGetStateParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcGetState_args)
        return this.equals((rpcGetState_args)that);
      return false;
    }

    public boolean equals(rpcGetState_args that) {
      if (that == null)
        return false;

      boolean this_present_getStateParameter = true && this.isSetGetStateParameter();
      boolean that_present_getStateParameter = true && that.isSetGetStateParameter();
      if (this_present_getStateParameter || that_present_getStateParameter) {
        if (!(this_present_getStateParameter && that_present_getStateParameter))
          return false;
        if (!this.getStateParameter.equals(that.getStateParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_getStateParameter = true && (isSetGetStateParameter());
      list.add(present_getStateParameter);
      if (present_getStateParameter)
        list.add(getStateParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcGetState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetStateParameter()).compareTo(other.isSetGetStateParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetStateParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getStateParameter, other.getStateParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcGetState_args(");
      boolean first = true;

      sb.append("getStateParameter:");
      if (this.getStateParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.getStateParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getStateParameter != null) {
        getStateParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcGetState_argsStandardSchemeFactory implements SchemeFactory {
      public rpcGetState_argsStandardScheme getScheme() {
        return new rpcGetState_argsStandardScheme();
      }
    }

    private static class rpcGetState_argsStandardScheme extends StandardScheme<rpcGetState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcGetState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_STATE_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getStateParameter = new GetStateParameter();
                struct.getStateParameter.read(iprot);
                struct.setGetStateParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcGetState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getStateParameter != null) {
          oprot.writeFieldBegin(GET_STATE_PARAMETER_FIELD_DESC);
          struct.getStateParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcGetState_argsTupleSchemeFactory implements SchemeFactory {
      public rpcGetState_argsTupleScheme getScheme() {
        return new rpcGetState_argsTupleScheme();
      }
    }

    private static class rpcGetState_argsTupleScheme extends TupleScheme<rpcGetState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcGetState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetStateParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGetStateParameter()) {
          struct.getStateParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcGetState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.getStateParameter = new GetStateParameter();
          struct.getStateParameter.read(iprot);
          struct.setGetStateParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcGetState_result implements org.apache.thrift.TBase<rpcGetState_result, rpcGetState_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcGetState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcGetState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcGetState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcGetState_resultTupleSchemeFactory());
    }

    public GetStateResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetStateResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcGetState_result.class, metaDataMap);
    }

    public rpcGetState_result() {
    }

    public rpcGetState_result(
      GetStateResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcGetState_result(rpcGetState_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetStateResponse(other.success);
      }
    }

    public rpcGetState_result deepCopy() {
      return new rpcGetState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetStateResponse getSuccess() {
      return this.success;
    }

    public rpcGetState_result setSuccess(GetStateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetStateResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcGetState_result)
        return this.equals((rpcGetState_result)that);
      return false;
    }

    public boolean equals(rpcGetState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcGetState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcGetState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcGetState_resultStandardSchemeFactory implements SchemeFactory {
      public rpcGetState_resultStandardScheme getScheme() {
        return new rpcGetState_resultStandardScheme();
      }
    }

    private static class rpcGetState_resultStandardScheme extends StandardScheme<rpcGetState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcGetState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetStateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcGetState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcGetState_resultTupleSchemeFactory implements SchemeFactory {
      public rpcGetState_resultTupleScheme getScheme() {
        return new rpcGetState_resultTupleScheme();
      }
    }

    private static class rpcGetState_resultTupleScheme extends TupleScheme<rpcGetState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcGetState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcGetState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetStateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ping_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
