/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-11")
public class VRCodeService {

  public interface Iface {

    public RequestResponse rpcRequest(RequestParameter requestParameter) throws org.apache.thrift.TException;

    public PrepareResponse rpcPrepare(PrepareParameter prepareParameter) throws org.apache.thrift.TException;

    public CommitResponse rpcCommit(CommitParameter commitParameter) throws org.apache.thrift.TException;

    public StartViewChangeResponse rpcStartViewChange(int newViewNumber, int replicaNumber) throws org.apache.thrift.TException;

    public DoViewChangeResponse rpcDoViewChange(int newViewNumber, List<Log> log, int oldViewNumber, int checkPoint, int opNumber, int commitNumber, int replicaNumber) throws org.apache.thrift.TException;

    public StartViewResponse rpcStartView(int viewNumber, List<Log> log, int checkPoint, int opNumber, int commitNumber) throws org.apache.thrift.TException;

    public RecoveryResponse rpcRecovery(int replicaNumber, byte nonce) throws org.apache.thrift.TException;

    public GetStateResponse rpcGetState(int viewNumber, int opNumber, int replicaNumber) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void rpcRequest(RequestParameter requestParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcPrepare(PrepareParameter prepareParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcCommit(CommitParameter commitParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcStartViewChange(int newViewNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcDoViewChange(int newViewNumber, List<Log> log, int oldViewNumber, int checkPoint, int opNumber, int commitNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcStartView(int viewNumber, List<Log> log, int checkPoint, int opNumber, int commitNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcRecovery(int replicaNumber, byte nonce, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rpcGetState(int viewNumber, int opNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RequestResponse rpcRequest(RequestParameter requestParameter) throws org.apache.thrift.TException
    {
      send_rpcRequest(requestParameter);
      return recv_rpcRequest();
    }

    public void send_rpcRequest(RequestParameter requestParameter) throws org.apache.thrift.TException
    {
      rpcRequest_args args = new rpcRequest_args();
      args.setRequestParameter(requestParameter);
      sendBase("rpcRequest", args);
    }

    public RequestResponse recv_rpcRequest() throws org.apache.thrift.TException
    {
      rpcRequest_result result = new rpcRequest_result();
      receiveBase(result, "rpcRequest");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcRequest failed: unknown result");
    }

    public PrepareResponse rpcPrepare(PrepareParameter prepareParameter) throws org.apache.thrift.TException
    {
      send_rpcPrepare(prepareParameter);
      return recv_rpcPrepare();
    }

    public void send_rpcPrepare(PrepareParameter prepareParameter) throws org.apache.thrift.TException
    {
      rpcPrepare_args args = new rpcPrepare_args();
      args.setPrepareParameter(prepareParameter);
      sendBase("rpcPrepare", args);
    }

    public PrepareResponse recv_rpcPrepare() throws org.apache.thrift.TException
    {
      rpcPrepare_result result = new rpcPrepare_result();
      receiveBase(result, "rpcPrepare");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcPrepare failed: unknown result");
    }

    public CommitResponse rpcCommit(CommitParameter commitParameter) throws org.apache.thrift.TException
    {
      send_rpcCommit(commitParameter);
      return recv_rpcCommit();
    }

    public void send_rpcCommit(CommitParameter commitParameter) throws org.apache.thrift.TException
    {
      rpcCommit_args args = new rpcCommit_args();
      args.setCommitParameter(commitParameter);
      sendBase("rpcCommit", args);
    }

    public CommitResponse recv_rpcCommit() throws org.apache.thrift.TException
    {
      rpcCommit_result result = new rpcCommit_result();
      receiveBase(result, "rpcCommit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcCommit failed: unknown result");
    }

    public StartViewChangeResponse rpcStartViewChange(int newViewNumber, int replicaNumber) throws org.apache.thrift.TException
    {
      send_rpcStartViewChange(newViewNumber, replicaNumber);
      return recv_rpcStartViewChange();
    }

    public void send_rpcStartViewChange(int newViewNumber, int replicaNumber) throws org.apache.thrift.TException
    {
      rpcStartViewChange_args args = new rpcStartViewChange_args();
      args.setNewViewNumber(newViewNumber);
      args.setReplicaNumber(replicaNumber);
      sendBase("rpcStartViewChange", args);
    }

    public StartViewChangeResponse recv_rpcStartViewChange() throws org.apache.thrift.TException
    {
      rpcStartViewChange_result result = new rpcStartViewChange_result();
      receiveBase(result, "rpcStartViewChange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcStartViewChange failed: unknown result");
    }

    public DoViewChangeResponse rpcDoViewChange(int newViewNumber, List<Log> log, int oldViewNumber, int checkPoint, int opNumber, int commitNumber, int replicaNumber) throws org.apache.thrift.TException
    {
      send_rpcDoViewChange(newViewNumber, log, oldViewNumber, checkPoint, opNumber, commitNumber, replicaNumber);
      return recv_rpcDoViewChange();
    }

    public void send_rpcDoViewChange(int newViewNumber, List<Log> log, int oldViewNumber, int checkPoint, int opNumber, int commitNumber, int replicaNumber) throws org.apache.thrift.TException
    {
      rpcDoViewChange_args args = new rpcDoViewChange_args();
      args.setNewViewNumber(newViewNumber);
      args.setLog(log);
      args.setOldViewNumber(oldViewNumber);
      args.setCheckPoint(checkPoint);
      args.setOpNumber(opNumber);
      args.setCommitNumber(commitNumber);
      args.setReplicaNumber(replicaNumber);
      sendBase("rpcDoViewChange", args);
    }

    public DoViewChangeResponse recv_rpcDoViewChange() throws org.apache.thrift.TException
    {
      rpcDoViewChange_result result = new rpcDoViewChange_result();
      receiveBase(result, "rpcDoViewChange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcDoViewChange failed: unknown result");
    }

    public StartViewResponse rpcStartView(int viewNumber, List<Log> log, int checkPoint, int opNumber, int commitNumber) throws org.apache.thrift.TException
    {
      send_rpcStartView(viewNumber, log, checkPoint, opNumber, commitNumber);
      return recv_rpcStartView();
    }

    public void send_rpcStartView(int viewNumber, List<Log> log, int checkPoint, int opNumber, int commitNumber) throws org.apache.thrift.TException
    {
      rpcStartView_args args = new rpcStartView_args();
      args.setViewNumber(viewNumber);
      args.setLog(log);
      args.setCheckPoint(checkPoint);
      args.setOpNumber(opNumber);
      args.setCommitNumber(commitNumber);
      sendBase("rpcStartView", args);
    }

    public StartViewResponse recv_rpcStartView() throws org.apache.thrift.TException
    {
      rpcStartView_result result = new rpcStartView_result();
      receiveBase(result, "rpcStartView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcStartView failed: unknown result");
    }

    public RecoveryResponse rpcRecovery(int replicaNumber, byte nonce) throws org.apache.thrift.TException
    {
      send_rpcRecovery(replicaNumber, nonce);
      return recv_rpcRecovery();
    }

    public void send_rpcRecovery(int replicaNumber, byte nonce) throws org.apache.thrift.TException
    {
      rpcRecovery_args args = new rpcRecovery_args();
      args.setReplicaNumber(replicaNumber);
      args.setNonce(nonce);
      sendBase("rpcRecovery", args);
    }

    public RecoveryResponse recv_rpcRecovery() throws org.apache.thrift.TException
    {
      rpcRecovery_result result = new rpcRecovery_result();
      receiveBase(result, "rpcRecovery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcRecovery failed: unknown result");
    }

    public GetStateResponse rpcGetState(int viewNumber, int opNumber, int replicaNumber) throws org.apache.thrift.TException
    {
      send_rpcGetState(viewNumber, opNumber, replicaNumber);
      return recv_rpcGetState();
    }

    public void send_rpcGetState(int viewNumber, int opNumber, int replicaNumber) throws org.apache.thrift.TException
    {
      rpcGetState_args args = new rpcGetState_args();
      args.setViewNumber(viewNumber);
      args.setOpNumber(opNumber);
      args.setReplicaNumber(replicaNumber);
      sendBase("rpcGetState", args);
    }

    public GetStateResponse recv_rpcGetState() throws org.apache.thrift.TException
    {
      rpcGetState_result result = new rpcGetState_result();
      receiveBase(result, "rpcGetState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rpcGetState failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void rpcRequest(RequestParameter requestParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcRequest_call method_call = new rpcRequest_call(requestParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcRequest_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RequestParameter requestParameter;
      public rpcRequest_call(RequestParameter requestParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requestParameter = requestParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcRequest_args args = new rpcRequest_args();
        args.setRequestParameter(requestParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RequestResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcRequest();
      }
    }

    public void rpcPrepare(PrepareParameter prepareParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcPrepare_call method_call = new rpcPrepare_call(prepareParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcPrepare_call extends org.apache.thrift.async.TAsyncMethodCall {
      private PrepareParameter prepareParameter;
      public rpcPrepare_call(PrepareParameter prepareParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.prepareParameter = prepareParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcPrepare", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcPrepare_args args = new rpcPrepare_args();
        args.setPrepareParameter(prepareParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PrepareResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcPrepare();
      }
    }

    public void rpcCommit(CommitParameter commitParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcCommit_call method_call = new rpcCommit_call(commitParameter, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcCommit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private CommitParameter commitParameter;
      public rpcCommit_call(CommitParameter commitParameter, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.commitParameter = commitParameter;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcCommit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcCommit_args args = new rpcCommit_args();
        args.setCommitParameter(commitParameter);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CommitResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcCommit();
      }
    }

    public void rpcStartViewChange(int newViewNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcStartViewChange_call method_call = new rpcStartViewChange_call(newViewNumber, replicaNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcStartViewChange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int newViewNumber;
      private int replicaNumber;
      public rpcStartViewChange_call(int newViewNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newViewNumber = newViewNumber;
        this.replicaNumber = replicaNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcStartViewChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcStartViewChange_args args = new rpcStartViewChange_args();
        args.setNewViewNumber(newViewNumber);
        args.setReplicaNumber(replicaNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StartViewChangeResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcStartViewChange();
      }
    }

    public void rpcDoViewChange(int newViewNumber, List<Log> log, int oldViewNumber, int checkPoint, int opNumber, int commitNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcDoViewChange_call method_call = new rpcDoViewChange_call(newViewNumber, log, oldViewNumber, checkPoint, opNumber, commitNumber, replicaNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcDoViewChange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int newViewNumber;
      private List<Log> log;
      private int oldViewNumber;
      private int checkPoint;
      private int opNumber;
      private int commitNumber;
      private int replicaNumber;
      public rpcDoViewChange_call(int newViewNumber, List<Log> log, int oldViewNumber, int checkPoint, int opNumber, int commitNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newViewNumber = newViewNumber;
        this.log = log;
        this.oldViewNumber = oldViewNumber;
        this.checkPoint = checkPoint;
        this.opNumber = opNumber;
        this.commitNumber = commitNumber;
        this.replicaNumber = replicaNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcDoViewChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcDoViewChange_args args = new rpcDoViewChange_args();
        args.setNewViewNumber(newViewNumber);
        args.setLog(log);
        args.setOldViewNumber(oldViewNumber);
        args.setCheckPoint(checkPoint);
        args.setOpNumber(opNumber);
        args.setCommitNumber(commitNumber);
        args.setReplicaNumber(replicaNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DoViewChangeResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcDoViewChange();
      }
    }

    public void rpcStartView(int viewNumber, List<Log> log, int checkPoint, int opNumber, int commitNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcStartView_call method_call = new rpcStartView_call(viewNumber, log, checkPoint, opNumber, commitNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcStartView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int viewNumber;
      private List<Log> log;
      private int checkPoint;
      private int opNumber;
      private int commitNumber;
      public rpcStartView_call(int viewNumber, List<Log> log, int checkPoint, int opNumber, int commitNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.viewNumber = viewNumber;
        this.log = log;
        this.checkPoint = checkPoint;
        this.opNumber = opNumber;
        this.commitNumber = commitNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcStartView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcStartView_args args = new rpcStartView_args();
        args.setViewNumber(viewNumber);
        args.setLog(log);
        args.setCheckPoint(checkPoint);
        args.setOpNumber(opNumber);
        args.setCommitNumber(commitNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StartViewResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcStartView();
      }
    }

    public void rpcRecovery(int replicaNumber, byte nonce, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcRecovery_call method_call = new rpcRecovery_call(replicaNumber, nonce, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcRecovery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int replicaNumber;
      private byte nonce;
      public rpcRecovery_call(int replicaNumber, byte nonce, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.replicaNumber = replicaNumber;
        this.nonce = nonce;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcRecovery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcRecovery_args args = new rpcRecovery_args();
        args.setReplicaNumber(replicaNumber);
        args.setNonce(nonce);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RecoveryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcRecovery();
      }
    }

    public void rpcGetState(int viewNumber, int opNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rpcGetState_call method_call = new rpcGetState_call(viewNumber, opNumber, replicaNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rpcGetState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int viewNumber;
      private int opNumber;
      private int replicaNumber;
      public rpcGetState_call(int viewNumber, int opNumber, int replicaNumber, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.viewNumber = viewNumber;
        this.opNumber = opNumber;
        this.replicaNumber = replicaNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rpcGetState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rpcGetState_args args = new rpcGetState_args();
        args.setViewNumber(viewNumber);
        args.setOpNumber(opNumber);
        args.setReplicaNumber(replicaNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GetStateResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rpcGetState();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("rpcRequest", new rpcRequest());
      processMap.put("rpcPrepare", new rpcPrepare());
      processMap.put("rpcCommit", new rpcCommit());
      processMap.put("rpcStartViewChange", new rpcStartViewChange());
      processMap.put("rpcDoViewChange", new rpcDoViewChange());
      processMap.put("rpcStartView", new rpcStartView());
      processMap.put("rpcRecovery", new rpcRecovery());
      processMap.put("rpcGetState", new rpcGetState());
      return processMap;
    }

    public static class rpcRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcRequest_args> {
      public rpcRequest() {
        super("rpcRequest");
      }

      public rpcRequest_args getEmptyArgsInstance() {
        return new rpcRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcRequest_result getResult(I iface, rpcRequest_args args) throws org.apache.thrift.TException {
        rpcRequest_result result = new rpcRequest_result();
        result.success = iface.rpcRequest(args.requestParameter);
        return result;
      }
    }

    public static class rpcPrepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcPrepare_args> {
      public rpcPrepare() {
        super("rpcPrepare");
      }

      public rpcPrepare_args getEmptyArgsInstance() {
        return new rpcPrepare_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcPrepare_result getResult(I iface, rpcPrepare_args args) throws org.apache.thrift.TException {
        rpcPrepare_result result = new rpcPrepare_result();
        result.success = iface.rpcPrepare(args.prepareParameter);
        return result;
      }
    }

    public static class rpcCommit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcCommit_args> {
      public rpcCommit() {
        super("rpcCommit");
      }

      public rpcCommit_args getEmptyArgsInstance() {
        return new rpcCommit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcCommit_result getResult(I iface, rpcCommit_args args) throws org.apache.thrift.TException {
        rpcCommit_result result = new rpcCommit_result();
        result.success = iface.rpcCommit(args.commitParameter);
        return result;
      }
    }

    public static class rpcStartViewChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcStartViewChange_args> {
      public rpcStartViewChange() {
        super("rpcStartViewChange");
      }

      public rpcStartViewChange_args getEmptyArgsInstance() {
        return new rpcStartViewChange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcStartViewChange_result getResult(I iface, rpcStartViewChange_args args) throws org.apache.thrift.TException {
        rpcStartViewChange_result result = new rpcStartViewChange_result();
        result.success = iface.rpcStartViewChange(args.newViewNumber, args.replicaNumber);
        return result;
      }
    }

    public static class rpcDoViewChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcDoViewChange_args> {
      public rpcDoViewChange() {
        super("rpcDoViewChange");
      }

      public rpcDoViewChange_args getEmptyArgsInstance() {
        return new rpcDoViewChange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcDoViewChange_result getResult(I iface, rpcDoViewChange_args args) throws org.apache.thrift.TException {
        rpcDoViewChange_result result = new rpcDoViewChange_result();
        result.success = iface.rpcDoViewChange(args.newViewNumber, args.log, args.oldViewNumber, args.checkPoint, args.opNumber, args.commitNumber, args.replicaNumber);
        return result;
      }
    }

    public static class rpcStartView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcStartView_args> {
      public rpcStartView() {
        super("rpcStartView");
      }

      public rpcStartView_args getEmptyArgsInstance() {
        return new rpcStartView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcStartView_result getResult(I iface, rpcStartView_args args) throws org.apache.thrift.TException {
        rpcStartView_result result = new rpcStartView_result();
        result.success = iface.rpcStartView(args.viewNumber, args.log, args.checkPoint, args.opNumber, args.commitNumber);
        return result;
      }
    }

    public static class rpcRecovery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcRecovery_args> {
      public rpcRecovery() {
        super("rpcRecovery");
      }

      public rpcRecovery_args getEmptyArgsInstance() {
        return new rpcRecovery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcRecovery_result getResult(I iface, rpcRecovery_args args) throws org.apache.thrift.TException {
        rpcRecovery_result result = new rpcRecovery_result();
        result.success = iface.rpcRecovery(args.replicaNumber, args.nonce);
        return result;
      }
    }

    public static class rpcGetState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rpcGetState_args> {
      public rpcGetState() {
        super("rpcGetState");
      }

      public rpcGetState_args getEmptyArgsInstance() {
        return new rpcGetState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rpcGetState_result getResult(I iface, rpcGetState_args args) throws org.apache.thrift.TException {
        rpcGetState_result result = new rpcGetState_result();
        result.success = iface.rpcGetState(args.viewNumber, args.opNumber, args.replicaNumber);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("rpcRequest", new rpcRequest());
      processMap.put("rpcPrepare", new rpcPrepare());
      processMap.put("rpcCommit", new rpcCommit());
      processMap.put("rpcStartViewChange", new rpcStartViewChange());
      processMap.put("rpcDoViewChange", new rpcDoViewChange());
      processMap.put("rpcStartView", new rpcStartView());
      processMap.put("rpcRecovery", new rpcRecovery());
      processMap.put("rpcGetState", new rpcGetState());
      return processMap;
    }

    public static class rpcRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcRequest_args, RequestResponse> {
      public rpcRequest() {
        super("rpcRequest");
      }

      public rpcRequest_args getEmptyArgsInstance() {
        return new rpcRequest_args();
      }

      public AsyncMethodCallback<RequestResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RequestResponse>() { 
          public void onComplete(RequestResponse o) {
            rpcRequest_result result = new rpcRequest_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcRequest_result result = new rpcRequest_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcRequest_args args, org.apache.thrift.async.AsyncMethodCallback<RequestResponse> resultHandler) throws TException {
        iface.rpcRequest(args.requestParameter,resultHandler);
      }
    }

    public static class rpcPrepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcPrepare_args, PrepareResponse> {
      public rpcPrepare() {
        super("rpcPrepare");
      }

      public rpcPrepare_args getEmptyArgsInstance() {
        return new rpcPrepare_args();
      }

      public AsyncMethodCallback<PrepareResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PrepareResponse>() { 
          public void onComplete(PrepareResponse o) {
            rpcPrepare_result result = new rpcPrepare_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcPrepare_result result = new rpcPrepare_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcPrepare_args args, org.apache.thrift.async.AsyncMethodCallback<PrepareResponse> resultHandler) throws TException {
        iface.rpcPrepare(args.prepareParameter,resultHandler);
      }
    }

    public static class rpcCommit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcCommit_args, CommitResponse> {
      public rpcCommit() {
        super("rpcCommit");
      }

      public rpcCommit_args getEmptyArgsInstance() {
        return new rpcCommit_args();
      }

      public AsyncMethodCallback<CommitResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CommitResponse>() { 
          public void onComplete(CommitResponse o) {
            rpcCommit_result result = new rpcCommit_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcCommit_result result = new rpcCommit_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcCommit_args args, org.apache.thrift.async.AsyncMethodCallback<CommitResponse> resultHandler) throws TException {
        iface.rpcCommit(args.commitParameter,resultHandler);
      }
    }

    public static class rpcStartViewChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcStartViewChange_args, StartViewChangeResponse> {
      public rpcStartViewChange() {
        super("rpcStartViewChange");
      }

      public rpcStartViewChange_args getEmptyArgsInstance() {
        return new rpcStartViewChange_args();
      }

      public AsyncMethodCallback<StartViewChangeResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StartViewChangeResponse>() { 
          public void onComplete(StartViewChangeResponse o) {
            rpcStartViewChange_result result = new rpcStartViewChange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcStartViewChange_result result = new rpcStartViewChange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcStartViewChange_args args, org.apache.thrift.async.AsyncMethodCallback<StartViewChangeResponse> resultHandler) throws TException {
        iface.rpcStartViewChange(args.newViewNumber, args.replicaNumber,resultHandler);
      }
    }

    public static class rpcDoViewChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcDoViewChange_args, DoViewChangeResponse> {
      public rpcDoViewChange() {
        super("rpcDoViewChange");
      }

      public rpcDoViewChange_args getEmptyArgsInstance() {
        return new rpcDoViewChange_args();
      }

      public AsyncMethodCallback<DoViewChangeResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DoViewChangeResponse>() { 
          public void onComplete(DoViewChangeResponse o) {
            rpcDoViewChange_result result = new rpcDoViewChange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcDoViewChange_result result = new rpcDoViewChange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcDoViewChange_args args, org.apache.thrift.async.AsyncMethodCallback<DoViewChangeResponse> resultHandler) throws TException {
        iface.rpcDoViewChange(args.newViewNumber, args.log, args.oldViewNumber, args.checkPoint, args.opNumber, args.commitNumber, args.replicaNumber,resultHandler);
      }
    }

    public static class rpcStartView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcStartView_args, StartViewResponse> {
      public rpcStartView() {
        super("rpcStartView");
      }

      public rpcStartView_args getEmptyArgsInstance() {
        return new rpcStartView_args();
      }

      public AsyncMethodCallback<StartViewResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StartViewResponse>() { 
          public void onComplete(StartViewResponse o) {
            rpcStartView_result result = new rpcStartView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcStartView_result result = new rpcStartView_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcStartView_args args, org.apache.thrift.async.AsyncMethodCallback<StartViewResponse> resultHandler) throws TException {
        iface.rpcStartView(args.viewNumber, args.log, args.checkPoint, args.opNumber, args.commitNumber,resultHandler);
      }
    }

    public static class rpcRecovery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcRecovery_args, RecoveryResponse> {
      public rpcRecovery() {
        super("rpcRecovery");
      }

      public rpcRecovery_args getEmptyArgsInstance() {
        return new rpcRecovery_args();
      }

      public AsyncMethodCallback<RecoveryResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RecoveryResponse>() { 
          public void onComplete(RecoveryResponse o) {
            rpcRecovery_result result = new rpcRecovery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcRecovery_result result = new rpcRecovery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcRecovery_args args, org.apache.thrift.async.AsyncMethodCallback<RecoveryResponse> resultHandler) throws TException {
        iface.rpcRecovery(args.replicaNumber, args.nonce,resultHandler);
      }
    }

    public static class rpcGetState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rpcGetState_args, GetStateResponse> {
      public rpcGetState() {
        super("rpcGetState");
      }

      public rpcGetState_args getEmptyArgsInstance() {
        return new rpcGetState_args();
      }

      public AsyncMethodCallback<GetStateResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GetStateResponse>() { 
          public void onComplete(GetStateResponse o) {
            rpcGetState_result result = new rpcGetState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rpcGetState_result result = new rpcGetState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rpcGetState_args args, org.apache.thrift.async.AsyncMethodCallback<GetStateResponse> resultHandler) throws TException {
        iface.rpcGetState(args.viewNumber, args.opNumber, args.replicaNumber,resultHandler);
      }
    }

  }

  public static class rpcRequest_args implements org.apache.thrift.TBase<rpcRequest_args, rpcRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRequest_args");

    private static final org.apache.thrift.protocol.TField REQUEST_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("requestParameter", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRequest_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRequest_argsTupleSchemeFactory());
    }

    public RequestParameter requestParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUEST_PARAMETER((short)1, "requestParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST_PARAMETER
            return REQUEST_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("requestParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRequest_args.class, metaDataMap);
    }

    public rpcRequest_args() {
    }

    public rpcRequest_args(
      RequestParameter requestParameter)
    {
      this();
      this.requestParameter = requestParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRequest_args(rpcRequest_args other) {
      if (other.isSetRequestParameter()) {
        this.requestParameter = new RequestParameter(other.requestParameter);
      }
    }

    public rpcRequest_args deepCopy() {
      return new rpcRequest_args(this);
    }

    @Override
    public void clear() {
      this.requestParameter = null;
    }

    public RequestParameter getRequestParameter() {
      return this.requestParameter;
    }

    public rpcRequest_args setRequestParameter(RequestParameter requestParameter) {
      this.requestParameter = requestParameter;
      return this;
    }

    public void unsetRequestParameter() {
      this.requestParameter = null;
    }

    /** Returns true if field requestParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestParameter() {
      return this.requestParameter != null;
    }

    public void setRequestParameterIsSet(boolean value) {
      if (!value) {
        this.requestParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST_PARAMETER:
        if (value == null) {
          unsetRequestParameter();
        } else {
          setRequestParameter((RequestParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST_PARAMETER:
        return getRequestParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST_PARAMETER:
        return isSetRequestParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRequest_args)
        return this.equals((rpcRequest_args)that);
      return false;
    }

    public boolean equals(rpcRequest_args that) {
      if (that == null)
        return false;

      boolean this_present_requestParameter = true && this.isSetRequestParameter();
      boolean that_present_requestParameter = true && that.isSetRequestParameter();
      if (this_present_requestParameter || that_present_requestParameter) {
        if (!(this_present_requestParameter && that_present_requestParameter))
          return false;
        if (!this.requestParameter.equals(that.requestParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requestParameter = true && (isSetRequestParameter());
      list.add(present_requestParameter);
      if (present_requestParameter)
        list.add(requestParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequestParameter()).compareTo(other.isSetRequestParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestParameter, other.requestParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRequest_args(");
      boolean first = true;

      sb.append("requestParameter:");
      if (this.requestParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.requestParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (requestParameter != null) {
        requestParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRequest_argsStandardSchemeFactory implements SchemeFactory {
      public rpcRequest_argsStandardScheme getScheme() {
        return new rpcRequest_argsStandardScheme();
      }
    }

    private static class rpcRequest_argsStandardScheme extends StandardScheme<rpcRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.requestParameter = new RequestParameter();
                struct.requestParameter.read(iprot);
                struct.setRequestParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.requestParameter != null) {
          oprot.writeFieldBegin(REQUEST_PARAMETER_FIELD_DESC);
          struct.requestParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRequest_argsTupleSchemeFactory implements SchemeFactory {
      public rpcRequest_argsTupleScheme getScheme() {
        return new rpcRequest_argsTupleScheme();
      }
    }

    private static class rpcRequest_argsTupleScheme extends TupleScheme<rpcRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequestParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequestParameter()) {
          struct.requestParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRequest_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.requestParameter = new RequestParameter();
          struct.requestParameter.read(iprot);
          struct.setRequestParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcRequest_result implements org.apache.thrift.TBase<rpcRequest_result, rpcRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRequest_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRequest_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRequest_resultTupleSchemeFactory());
    }

    public RequestResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRequest_result.class, metaDataMap);
    }

    public rpcRequest_result() {
    }

    public rpcRequest_result(
      RequestResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRequest_result(rpcRequest_result other) {
      if (other.isSetSuccess()) {
        this.success = new RequestResponse(other.success);
      }
    }

    public rpcRequest_result deepCopy() {
      return new rpcRequest_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RequestResponse getSuccess() {
      return this.success;
    }

    public rpcRequest_result setSuccess(RequestResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RequestResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRequest_result)
        return this.equals((rpcRequest_result)that);
      return false;
    }

    public boolean equals(rpcRequest_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRequest_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRequest_resultStandardSchemeFactory implements SchemeFactory {
      public rpcRequest_resultStandardScheme getScheme() {
        return new rpcRequest_resultStandardScheme();
      }
    }

    private static class rpcRequest_resultStandardScheme extends StandardScheme<rpcRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RequestResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRequest_resultTupleSchemeFactory implements SchemeFactory {
      public rpcRequest_resultTupleScheme getScheme() {
        return new rpcRequest_resultTupleScheme();
      }
    }

    private static class rpcRequest_resultTupleScheme extends TupleScheme<rpcRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRequest_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RequestResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcPrepare_args implements org.apache.thrift.TBase<rpcPrepare_args, rpcPrepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcPrepare_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcPrepare_args");

    private static final org.apache.thrift.protocol.TField PREPARE_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("prepareParameter", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcPrepare_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcPrepare_argsTupleSchemeFactory());
    }

    public PrepareParameter prepareParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PREPARE_PARAMETER((short)2, "prepareParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // PREPARE_PARAMETER
            return PREPARE_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PREPARE_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("prepareParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrepareParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcPrepare_args.class, metaDataMap);
    }

    public rpcPrepare_args() {
    }

    public rpcPrepare_args(
      PrepareParameter prepareParameter)
    {
      this();
      this.prepareParameter = prepareParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcPrepare_args(rpcPrepare_args other) {
      if (other.isSetPrepareParameter()) {
        this.prepareParameter = new PrepareParameter(other.prepareParameter);
      }
    }

    public rpcPrepare_args deepCopy() {
      return new rpcPrepare_args(this);
    }

    @Override
    public void clear() {
      this.prepareParameter = null;
    }

    public PrepareParameter getPrepareParameter() {
      return this.prepareParameter;
    }

    public rpcPrepare_args setPrepareParameter(PrepareParameter prepareParameter) {
      this.prepareParameter = prepareParameter;
      return this;
    }

    public void unsetPrepareParameter() {
      this.prepareParameter = null;
    }

    /** Returns true if field prepareParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetPrepareParameter() {
      return this.prepareParameter != null;
    }

    public void setPrepareParameterIsSet(boolean value) {
      if (!value) {
        this.prepareParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PREPARE_PARAMETER:
        if (value == null) {
          unsetPrepareParameter();
        } else {
          setPrepareParameter((PrepareParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PREPARE_PARAMETER:
        return getPrepareParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PREPARE_PARAMETER:
        return isSetPrepareParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcPrepare_args)
        return this.equals((rpcPrepare_args)that);
      return false;
    }

    public boolean equals(rpcPrepare_args that) {
      if (that == null)
        return false;

      boolean this_present_prepareParameter = true && this.isSetPrepareParameter();
      boolean that_present_prepareParameter = true && that.isSetPrepareParameter();
      if (this_present_prepareParameter || that_present_prepareParameter) {
        if (!(this_present_prepareParameter && that_present_prepareParameter))
          return false;
        if (!this.prepareParameter.equals(that.prepareParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_prepareParameter = true && (isSetPrepareParameter());
      list.add(present_prepareParameter);
      if (present_prepareParameter)
        list.add(prepareParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcPrepare_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPrepareParameter()).compareTo(other.isSetPrepareParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrepareParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prepareParameter, other.prepareParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcPrepare_args(");
      boolean first = true;

      sb.append("prepareParameter:");
      if (this.prepareParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.prepareParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (prepareParameter != null) {
        prepareParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcPrepare_argsStandardSchemeFactory implements SchemeFactory {
      public rpcPrepare_argsStandardScheme getScheme() {
        return new rpcPrepare_argsStandardScheme();
      }
    }

    private static class rpcPrepare_argsStandardScheme extends StandardScheme<rpcPrepare_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // PREPARE_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.prepareParameter = new PrepareParameter();
                struct.prepareParameter.read(iprot);
                struct.setPrepareParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.prepareParameter != null) {
          oprot.writeFieldBegin(PREPARE_PARAMETER_FIELD_DESC);
          struct.prepareParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcPrepare_argsTupleSchemeFactory implements SchemeFactory {
      public rpcPrepare_argsTupleScheme getScheme() {
        return new rpcPrepare_argsTupleScheme();
      }
    }

    private static class rpcPrepare_argsTupleScheme extends TupleScheme<rpcPrepare_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPrepareParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPrepareParameter()) {
          struct.prepareParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.prepareParameter = new PrepareParameter();
          struct.prepareParameter.read(iprot);
          struct.setPrepareParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcPrepare_result implements org.apache.thrift.TBase<rpcPrepare_result, rpcPrepare_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcPrepare_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcPrepare_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcPrepare_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcPrepare_resultTupleSchemeFactory());
    }

    public PrepareResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PrepareResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcPrepare_result.class, metaDataMap);
    }

    public rpcPrepare_result() {
    }

    public rpcPrepare_result(
      PrepareResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcPrepare_result(rpcPrepare_result other) {
      if (other.isSetSuccess()) {
        this.success = new PrepareResponse(other.success);
      }
    }

    public rpcPrepare_result deepCopy() {
      return new rpcPrepare_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public PrepareResponse getSuccess() {
      return this.success;
    }

    public rpcPrepare_result setSuccess(PrepareResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PrepareResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcPrepare_result)
        return this.equals((rpcPrepare_result)that);
      return false;
    }

    public boolean equals(rpcPrepare_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcPrepare_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcPrepare_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcPrepare_resultStandardSchemeFactory implements SchemeFactory {
      public rpcPrepare_resultStandardScheme getScheme() {
        return new rpcPrepare_resultStandardScheme();
      }
    }

    private static class rpcPrepare_resultStandardScheme extends StandardScheme<rpcPrepare_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PrepareResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcPrepare_resultTupleSchemeFactory implements SchemeFactory {
      public rpcPrepare_resultTupleScheme getScheme() {
        return new rpcPrepare_resultTupleScheme();
      }
    }

    private static class rpcPrepare_resultTupleScheme extends TupleScheme<rpcPrepare_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcPrepare_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new PrepareResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcCommit_args implements org.apache.thrift.TBase<rpcCommit_args, rpcCommit_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcCommit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcCommit_args");

    private static final org.apache.thrift.protocol.TField COMMIT_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("commitParameter", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcCommit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcCommit_argsTupleSchemeFactory());
    }

    public CommitParameter commitParameter; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMIT_PARAMETER((short)3, "commitParameter");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 3: // COMMIT_PARAMETER
            return COMMIT_PARAMETER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMIT_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("commitParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommitParameter.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcCommit_args.class, metaDataMap);
    }

    public rpcCommit_args() {
    }

    public rpcCommit_args(
      CommitParameter commitParameter)
    {
      this();
      this.commitParameter = commitParameter;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcCommit_args(rpcCommit_args other) {
      if (other.isSetCommitParameter()) {
        this.commitParameter = new CommitParameter(other.commitParameter);
      }
    }

    public rpcCommit_args deepCopy() {
      return new rpcCommit_args(this);
    }

    @Override
    public void clear() {
      this.commitParameter = null;
    }

    public CommitParameter getCommitParameter() {
      return this.commitParameter;
    }

    public rpcCommit_args setCommitParameter(CommitParameter commitParameter) {
      this.commitParameter = commitParameter;
      return this;
    }

    public void unsetCommitParameter() {
      this.commitParameter = null;
    }

    /** Returns true if field commitParameter is set (has been assigned a value) and false otherwise */
    public boolean isSetCommitParameter() {
      return this.commitParameter != null;
    }

    public void setCommitParameterIsSet(boolean value) {
      if (!value) {
        this.commitParameter = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMIT_PARAMETER:
        if (value == null) {
          unsetCommitParameter();
        } else {
          setCommitParameter((CommitParameter)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMIT_PARAMETER:
        return getCommitParameter();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMIT_PARAMETER:
        return isSetCommitParameter();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcCommit_args)
        return this.equals((rpcCommit_args)that);
      return false;
    }

    public boolean equals(rpcCommit_args that) {
      if (that == null)
        return false;

      boolean this_present_commitParameter = true && this.isSetCommitParameter();
      boolean that_present_commitParameter = true && that.isSetCommitParameter();
      if (this_present_commitParameter || that_present_commitParameter) {
        if (!(this_present_commitParameter && that_present_commitParameter))
          return false;
        if (!this.commitParameter.equals(that.commitParameter))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_commitParameter = true && (isSetCommitParameter());
      list.add(present_commitParameter);
      if (present_commitParameter)
        list.add(commitParameter);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcCommit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommitParameter()).compareTo(other.isSetCommitParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommitParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitParameter, other.commitParameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcCommit_args(");
      boolean first = true;

      sb.append("commitParameter:");
      if (this.commitParameter == null) {
        sb.append("null");
      } else {
        sb.append(this.commitParameter);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (commitParameter != null) {
        commitParameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcCommit_argsStandardSchemeFactory implements SchemeFactory {
      public rpcCommit_argsStandardScheme getScheme() {
        return new rpcCommit_argsStandardScheme();
      }
    }

    private static class rpcCommit_argsStandardScheme extends StandardScheme<rpcCommit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcCommit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 3: // COMMIT_PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.commitParameter = new CommitParameter();
                struct.commitParameter.read(iprot);
                struct.setCommitParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcCommit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.commitParameter != null) {
          oprot.writeFieldBegin(COMMIT_PARAMETER_FIELD_DESC);
          struct.commitParameter.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcCommit_argsTupleSchemeFactory implements SchemeFactory {
      public rpcCommit_argsTupleScheme getScheme() {
        return new rpcCommit_argsTupleScheme();
      }
    }

    private static class rpcCommit_argsTupleScheme extends TupleScheme<rpcCommit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommitParameter()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommitParameter()) {
          struct.commitParameter.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcCommit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.commitParameter = new CommitParameter();
          struct.commitParameter.read(iprot);
          struct.setCommitParameterIsSet(true);
        }
      }
    }

  }

  public static class rpcCommit_result implements org.apache.thrift.TBase<rpcCommit_result, rpcCommit_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcCommit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcCommit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcCommit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcCommit_resultTupleSchemeFactory());
    }

    public CommitResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommitResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcCommit_result.class, metaDataMap);
    }

    public rpcCommit_result() {
    }

    public rpcCommit_result(
      CommitResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcCommit_result(rpcCommit_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommitResponse(other.success);
      }
    }

    public rpcCommit_result deepCopy() {
      return new rpcCommit_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public CommitResponse getSuccess() {
      return this.success;
    }

    public rpcCommit_result setSuccess(CommitResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CommitResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcCommit_result)
        return this.equals((rpcCommit_result)that);
      return false;
    }

    public boolean equals(rpcCommit_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcCommit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcCommit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcCommit_resultStandardSchemeFactory implements SchemeFactory {
      public rpcCommit_resultStandardScheme getScheme() {
        return new rpcCommit_resultStandardScheme();
      }
    }

    private static class rpcCommit_resultStandardScheme extends StandardScheme<rpcCommit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcCommit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CommitResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcCommit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcCommit_resultTupleSchemeFactory implements SchemeFactory {
      public rpcCommit_resultTupleScheme getScheme() {
        return new rpcCommit_resultTupleScheme();
      }
    }

    private static class rpcCommit_resultTupleScheme extends TupleScheme<rpcCommit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcCommit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new CommitResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcStartViewChange_args implements org.apache.thrift.TBase<rpcStartViewChange_args, rpcStartViewChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartViewChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartViewChange_args");

    private static final org.apache.thrift.protocol.TField NEW_VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("newViewNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REPLICA_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaNumber", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartViewChange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartViewChange_argsTupleSchemeFactory());
    }

    public int newViewNumber; // required
    public int replicaNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_VIEW_NUMBER((short)1, "newViewNumber"),
      REPLICA_NUMBER((short)2, "replicaNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_VIEW_NUMBER
            return NEW_VIEW_NUMBER;
          case 2: // REPLICA_NUMBER
            return REPLICA_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWVIEWNUMBER_ISSET_ID = 0;
    private static final int __REPLICANUMBER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("newViewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.REPLICA_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("replicaNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartViewChange_args.class, metaDataMap);
    }

    public rpcStartViewChange_args() {
    }

    public rpcStartViewChange_args(
      int newViewNumber,
      int replicaNumber)
    {
      this();
      this.newViewNumber = newViewNumber;
      setNewViewNumberIsSet(true);
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartViewChange_args(rpcStartViewChange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.newViewNumber = other.newViewNumber;
      this.replicaNumber = other.replicaNumber;
    }

    public rpcStartViewChange_args deepCopy() {
      return new rpcStartViewChange_args(this);
    }

    @Override
    public void clear() {
      setNewViewNumberIsSet(false);
      this.newViewNumber = 0;
      setReplicaNumberIsSet(false);
      this.replicaNumber = 0;
    }

    public int getNewViewNumber() {
      return this.newViewNumber;
    }

    public rpcStartViewChange_args setNewViewNumber(int newViewNumber) {
      this.newViewNumber = newViewNumber;
      setNewViewNumberIsSet(true);
      return this;
    }

    public void unsetNewViewNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWVIEWNUMBER_ISSET_ID);
    }

    /** Returns true if field newViewNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetNewViewNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWVIEWNUMBER_ISSET_ID);
    }

    public void setNewViewNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWVIEWNUMBER_ISSET_ID, value);
    }

    public int getReplicaNumber() {
      return this.replicaNumber;
    }

    public rpcStartViewChange_args setReplicaNumber(int replicaNumber) {
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
      return this;
    }

    public void unsetReplicaNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    /** Returns true if field replicaNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetReplicaNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    public void setReplicaNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_VIEW_NUMBER:
        if (value == null) {
          unsetNewViewNumber();
        } else {
          setNewViewNumber((Integer)value);
        }
        break;

      case REPLICA_NUMBER:
        if (value == null) {
          unsetReplicaNumber();
        } else {
          setReplicaNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_VIEW_NUMBER:
        return Integer.valueOf(getNewViewNumber());

      case REPLICA_NUMBER:
        return Integer.valueOf(getReplicaNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_VIEW_NUMBER:
        return isSetNewViewNumber();
      case REPLICA_NUMBER:
        return isSetReplicaNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartViewChange_args)
        return this.equals((rpcStartViewChange_args)that);
      return false;
    }

    public boolean equals(rpcStartViewChange_args that) {
      if (that == null)
        return false;

      boolean this_present_newViewNumber = true;
      boolean that_present_newViewNumber = true;
      if (this_present_newViewNumber || that_present_newViewNumber) {
        if (!(this_present_newViewNumber && that_present_newViewNumber))
          return false;
        if (this.newViewNumber != that.newViewNumber)
          return false;
      }

      boolean this_present_replicaNumber = true;
      boolean that_present_replicaNumber = true;
      if (this_present_replicaNumber || that_present_replicaNumber) {
        if (!(this_present_replicaNumber && that_present_replicaNumber))
          return false;
        if (this.replicaNumber != that.replicaNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_newViewNumber = true;
      list.add(present_newViewNumber);
      if (present_newViewNumber)
        list.add(newViewNumber);

      boolean present_replicaNumber = true;
      list.add(present_replicaNumber);
      if (present_replicaNumber)
        list.add(replicaNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartViewChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewViewNumber()).compareTo(other.isSetNewViewNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewViewNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newViewNumber, other.newViewNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplicaNumber()).compareTo(other.isSetReplicaNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplicaNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaNumber, other.replicaNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartViewChange_args(");
      boolean first = true;

      sb.append("newViewNumber:");
      sb.append(this.newViewNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replicaNumber:");
      sb.append(this.replicaNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartViewChange_argsStandardSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_argsStandardScheme getScheme() {
        return new rpcStartViewChange_argsStandardScheme();
      }
    }

    private static class rpcStartViewChange_argsStandardScheme extends StandardScheme<rpcStartViewChange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_VIEW_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newViewNumber = iprot.readI32();
                struct.setNewViewNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPLICA_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.replicaNumber = iprot.readI32();
                struct.setReplicaNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NEW_VIEW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.newViewNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLICA_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.replicaNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartViewChange_argsTupleSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_argsTupleScheme getScheme() {
        return new rpcStartViewChange_argsTupleScheme();
      }
    }

    private static class rpcStartViewChange_argsTupleScheme extends TupleScheme<rpcStartViewChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewViewNumber()) {
          optionals.set(0);
        }
        if (struct.isSetReplicaNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNewViewNumber()) {
          oprot.writeI32(struct.newViewNumber);
        }
        if (struct.isSetReplicaNumber()) {
          oprot.writeI32(struct.replicaNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.newViewNumber = iprot.readI32();
          struct.setNewViewNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.replicaNumber = iprot.readI32();
          struct.setReplicaNumberIsSet(true);
        }
      }
    }

  }

  public static class rpcStartViewChange_result implements org.apache.thrift.TBase<rpcStartViewChange_result, rpcStartViewChange_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartViewChange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartViewChange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartViewChange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartViewChange_resultTupleSchemeFactory());
    }

    public StartViewChangeResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartViewChangeResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartViewChange_result.class, metaDataMap);
    }

    public rpcStartViewChange_result() {
    }

    public rpcStartViewChange_result(
      StartViewChangeResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartViewChange_result(rpcStartViewChange_result other) {
      if (other.isSetSuccess()) {
        this.success = new StartViewChangeResponse(other.success);
      }
    }

    public rpcStartViewChange_result deepCopy() {
      return new rpcStartViewChange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StartViewChangeResponse getSuccess() {
      return this.success;
    }

    public rpcStartViewChange_result setSuccess(StartViewChangeResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StartViewChangeResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartViewChange_result)
        return this.equals((rpcStartViewChange_result)that);
      return false;
    }

    public boolean equals(rpcStartViewChange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartViewChange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartViewChange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartViewChange_resultStandardSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_resultStandardScheme getScheme() {
        return new rpcStartViewChange_resultStandardScheme();
      }
    }

    private static class rpcStartViewChange_resultStandardScheme extends StandardScheme<rpcStartViewChange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StartViewChangeResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartViewChange_resultTupleSchemeFactory implements SchemeFactory {
      public rpcStartViewChange_resultTupleScheme getScheme() {
        return new rpcStartViewChange_resultTupleScheme();
      }
    }

    private static class rpcStartViewChange_resultTupleScheme extends TupleScheme<rpcStartViewChange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StartViewChangeResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcDoViewChange_args implements org.apache.thrift.TBase<rpcDoViewChange_args, rpcDoViewChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcDoViewChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcDoViewChange_args");

    private static final org.apache.thrift.protocol.TField NEW_VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("newViewNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField OLD_VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("oldViewNumber", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField CHECK_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkPoint", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField OP_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("opNumber", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField COMMIT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("commitNumber", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField REPLICA_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaNumber", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcDoViewChange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcDoViewChange_argsTupleSchemeFactory());
    }

    public int newViewNumber; // required
    public List<Log> log; // required
    public int oldViewNumber; // required
    public int checkPoint; // required
    public int opNumber; // required
    public int commitNumber; // required
    public int replicaNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_VIEW_NUMBER((short)1, "newViewNumber"),
      LOG((short)2, "log"),
      OLD_VIEW_NUMBER((short)3, "oldViewNumber"),
      CHECK_POINT((short)4, "checkPoint"),
      OP_NUMBER((short)5, "opNumber"),
      COMMIT_NUMBER((short)6, "commitNumber"),
      REPLICA_NUMBER((short)7, "replicaNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_VIEW_NUMBER
            return NEW_VIEW_NUMBER;
          case 2: // LOG
            return LOG;
          case 3: // OLD_VIEW_NUMBER
            return OLD_VIEW_NUMBER;
          case 4: // CHECK_POINT
            return CHECK_POINT;
          case 5: // OP_NUMBER
            return OP_NUMBER;
          case 6: // COMMIT_NUMBER
            return COMMIT_NUMBER;
          case 7: // REPLICA_NUMBER
            return REPLICA_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWVIEWNUMBER_ISSET_ID = 0;
    private static final int __OLDVIEWNUMBER_ISSET_ID = 1;
    private static final int __CHECKPOINT_ISSET_ID = 2;
    private static final int __OPNUMBER_ISSET_ID = 3;
    private static final int __COMMITNUMBER_ISSET_ID = 4;
    private static final int __REPLICANUMBER_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("newViewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Log.class))));
      tmpMap.put(_Fields.OLD_VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("oldViewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CHECK_POINT, new org.apache.thrift.meta_data.FieldMetaData("checkPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.OP_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("opNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.COMMIT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("commitNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.REPLICA_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("replicaNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcDoViewChange_args.class, metaDataMap);
    }

    public rpcDoViewChange_args() {
    }

    public rpcDoViewChange_args(
      int newViewNumber,
      List<Log> log,
      int oldViewNumber,
      int checkPoint,
      int opNumber,
      int commitNumber,
      int replicaNumber)
    {
      this();
      this.newViewNumber = newViewNumber;
      setNewViewNumberIsSet(true);
      this.log = log;
      this.oldViewNumber = oldViewNumber;
      setOldViewNumberIsSet(true);
      this.checkPoint = checkPoint;
      setCheckPointIsSet(true);
      this.opNumber = opNumber;
      setOpNumberIsSet(true);
      this.commitNumber = commitNumber;
      setCommitNumberIsSet(true);
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcDoViewChange_args(rpcDoViewChange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.newViewNumber = other.newViewNumber;
      if (other.isSetLog()) {
        List<Log> __this__log = new ArrayList<Log>(other.log.size());
        for (Log other_element : other.log) {
          __this__log.add(new Log(other_element));
        }
        this.log = __this__log;
      }
      this.oldViewNumber = other.oldViewNumber;
      this.checkPoint = other.checkPoint;
      this.opNumber = other.opNumber;
      this.commitNumber = other.commitNumber;
      this.replicaNumber = other.replicaNumber;
    }

    public rpcDoViewChange_args deepCopy() {
      return new rpcDoViewChange_args(this);
    }

    @Override
    public void clear() {
      setNewViewNumberIsSet(false);
      this.newViewNumber = 0;
      this.log = null;
      setOldViewNumberIsSet(false);
      this.oldViewNumber = 0;
      setCheckPointIsSet(false);
      this.checkPoint = 0;
      setOpNumberIsSet(false);
      this.opNumber = 0;
      setCommitNumberIsSet(false);
      this.commitNumber = 0;
      setReplicaNumberIsSet(false);
      this.replicaNumber = 0;
    }

    public int getNewViewNumber() {
      return this.newViewNumber;
    }

    public rpcDoViewChange_args setNewViewNumber(int newViewNumber) {
      this.newViewNumber = newViewNumber;
      setNewViewNumberIsSet(true);
      return this;
    }

    public void unsetNewViewNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWVIEWNUMBER_ISSET_ID);
    }

    /** Returns true if field newViewNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetNewViewNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __NEWVIEWNUMBER_ISSET_ID);
    }

    public void setNewViewNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWVIEWNUMBER_ISSET_ID, value);
    }

    public int getLogSize() {
      return (this.log == null) ? 0 : this.log.size();
    }

    public java.util.Iterator<Log> getLogIterator() {
      return (this.log == null) ? null : this.log.iterator();
    }

    public void addToLog(Log elem) {
      if (this.log == null) {
        this.log = new ArrayList<Log>();
      }
      this.log.add(elem);
    }

    public List<Log> getLog() {
      return this.log;
    }

    public rpcDoViewChange_args setLog(List<Log> log) {
      this.log = log;
      return this;
    }

    public void unsetLog() {
      this.log = null;
    }

    /** Returns true if field log is set (has been assigned a value) and false otherwise */
    public boolean isSetLog() {
      return this.log != null;
    }

    public void setLogIsSet(boolean value) {
      if (!value) {
        this.log = null;
      }
    }

    public int getOldViewNumber() {
      return this.oldViewNumber;
    }

    public rpcDoViewChange_args setOldViewNumber(int oldViewNumber) {
      this.oldViewNumber = oldViewNumber;
      setOldViewNumberIsSet(true);
      return this;
    }

    public void unsetOldViewNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OLDVIEWNUMBER_ISSET_ID);
    }

    /** Returns true if field oldViewNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetOldViewNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __OLDVIEWNUMBER_ISSET_ID);
    }

    public void setOldViewNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OLDVIEWNUMBER_ISSET_ID, value);
    }

    public int getCheckPoint() {
      return this.checkPoint;
    }

    public rpcDoViewChange_args setCheckPoint(int checkPoint) {
      this.checkPoint = checkPoint;
      setCheckPointIsSet(true);
      return this;
    }

    public void unsetCheckPoint() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKPOINT_ISSET_ID);
    }

    /** Returns true if field checkPoint is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckPoint() {
      return EncodingUtils.testBit(__isset_bitfield, __CHECKPOINT_ISSET_ID);
    }

    public void setCheckPointIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKPOINT_ISSET_ID, value);
    }

    public int getOpNumber() {
      return this.opNumber;
    }

    public rpcDoViewChange_args setOpNumber(int opNumber) {
      this.opNumber = opNumber;
      setOpNumberIsSet(true);
      return this;
    }

    public void unsetOpNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
    }

    /** Returns true if field opNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetOpNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
    }

    public void setOpNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPNUMBER_ISSET_ID, value);
    }

    public int getCommitNumber() {
      return this.commitNumber;
    }

    public rpcDoViewChange_args setCommitNumber(int commitNumber) {
      this.commitNumber = commitNumber;
      setCommitNumberIsSet(true);
      return this;
    }

    public void unsetCommitNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID);
    }

    /** Returns true if field commitNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetCommitNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID);
    }

    public void setCommitNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID, value);
    }

    public int getReplicaNumber() {
      return this.replicaNumber;
    }

    public rpcDoViewChange_args setReplicaNumber(int replicaNumber) {
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
      return this;
    }

    public void unsetReplicaNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    /** Returns true if field replicaNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetReplicaNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    public void setReplicaNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_VIEW_NUMBER:
        if (value == null) {
          unsetNewViewNumber();
        } else {
          setNewViewNumber((Integer)value);
        }
        break;

      case LOG:
        if (value == null) {
          unsetLog();
        } else {
          setLog((List<Log>)value);
        }
        break;

      case OLD_VIEW_NUMBER:
        if (value == null) {
          unsetOldViewNumber();
        } else {
          setOldViewNumber((Integer)value);
        }
        break;

      case CHECK_POINT:
        if (value == null) {
          unsetCheckPoint();
        } else {
          setCheckPoint((Integer)value);
        }
        break;

      case OP_NUMBER:
        if (value == null) {
          unsetOpNumber();
        } else {
          setOpNumber((Integer)value);
        }
        break;

      case COMMIT_NUMBER:
        if (value == null) {
          unsetCommitNumber();
        } else {
          setCommitNumber((Integer)value);
        }
        break;

      case REPLICA_NUMBER:
        if (value == null) {
          unsetReplicaNumber();
        } else {
          setReplicaNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_VIEW_NUMBER:
        return Integer.valueOf(getNewViewNumber());

      case LOG:
        return getLog();

      case OLD_VIEW_NUMBER:
        return Integer.valueOf(getOldViewNumber());

      case CHECK_POINT:
        return Integer.valueOf(getCheckPoint());

      case OP_NUMBER:
        return Integer.valueOf(getOpNumber());

      case COMMIT_NUMBER:
        return Integer.valueOf(getCommitNumber());

      case REPLICA_NUMBER:
        return Integer.valueOf(getReplicaNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_VIEW_NUMBER:
        return isSetNewViewNumber();
      case LOG:
        return isSetLog();
      case OLD_VIEW_NUMBER:
        return isSetOldViewNumber();
      case CHECK_POINT:
        return isSetCheckPoint();
      case OP_NUMBER:
        return isSetOpNumber();
      case COMMIT_NUMBER:
        return isSetCommitNumber();
      case REPLICA_NUMBER:
        return isSetReplicaNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcDoViewChange_args)
        return this.equals((rpcDoViewChange_args)that);
      return false;
    }

    public boolean equals(rpcDoViewChange_args that) {
      if (that == null)
        return false;

      boolean this_present_newViewNumber = true;
      boolean that_present_newViewNumber = true;
      if (this_present_newViewNumber || that_present_newViewNumber) {
        if (!(this_present_newViewNumber && that_present_newViewNumber))
          return false;
        if (this.newViewNumber != that.newViewNumber)
          return false;
      }

      boolean this_present_log = true && this.isSetLog();
      boolean that_present_log = true && that.isSetLog();
      if (this_present_log || that_present_log) {
        if (!(this_present_log && that_present_log))
          return false;
        if (!this.log.equals(that.log))
          return false;
      }

      boolean this_present_oldViewNumber = true;
      boolean that_present_oldViewNumber = true;
      if (this_present_oldViewNumber || that_present_oldViewNumber) {
        if (!(this_present_oldViewNumber && that_present_oldViewNumber))
          return false;
        if (this.oldViewNumber != that.oldViewNumber)
          return false;
      }

      boolean this_present_checkPoint = true;
      boolean that_present_checkPoint = true;
      if (this_present_checkPoint || that_present_checkPoint) {
        if (!(this_present_checkPoint && that_present_checkPoint))
          return false;
        if (this.checkPoint != that.checkPoint)
          return false;
      }

      boolean this_present_opNumber = true;
      boolean that_present_opNumber = true;
      if (this_present_opNumber || that_present_opNumber) {
        if (!(this_present_opNumber && that_present_opNumber))
          return false;
        if (this.opNumber != that.opNumber)
          return false;
      }

      boolean this_present_commitNumber = true;
      boolean that_present_commitNumber = true;
      if (this_present_commitNumber || that_present_commitNumber) {
        if (!(this_present_commitNumber && that_present_commitNumber))
          return false;
        if (this.commitNumber != that.commitNumber)
          return false;
      }

      boolean this_present_replicaNumber = true;
      boolean that_present_replicaNumber = true;
      if (this_present_replicaNumber || that_present_replicaNumber) {
        if (!(this_present_replicaNumber && that_present_replicaNumber))
          return false;
        if (this.replicaNumber != that.replicaNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_newViewNumber = true;
      list.add(present_newViewNumber);
      if (present_newViewNumber)
        list.add(newViewNumber);

      boolean present_log = true && (isSetLog());
      list.add(present_log);
      if (present_log)
        list.add(log);

      boolean present_oldViewNumber = true;
      list.add(present_oldViewNumber);
      if (present_oldViewNumber)
        list.add(oldViewNumber);

      boolean present_checkPoint = true;
      list.add(present_checkPoint);
      if (present_checkPoint)
        list.add(checkPoint);

      boolean present_opNumber = true;
      list.add(present_opNumber);
      if (present_opNumber)
        list.add(opNumber);

      boolean present_commitNumber = true;
      list.add(present_commitNumber);
      if (present_commitNumber)
        list.add(commitNumber);

      boolean present_replicaNumber = true;
      list.add(present_replicaNumber);
      if (present_replicaNumber)
        list.add(replicaNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcDoViewChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewViewNumber()).compareTo(other.isSetNewViewNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewViewNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newViewNumber, other.newViewNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOldViewNumber()).compareTo(other.isSetOldViewNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldViewNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldViewNumber, other.oldViewNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCheckPoint()).compareTo(other.isSetCheckPoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckPoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkPoint, other.checkPoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpNumber()).compareTo(other.isSetOpNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opNumber, other.opNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommitNumber()).compareTo(other.isSetCommitNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommitNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitNumber, other.commitNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplicaNumber()).compareTo(other.isSetReplicaNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplicaNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaNumber, other.replicaNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcDoViewChange_args(");
      boolean first = true;

      sb.append("newViewNumber:");
      sb.append(this.newViewNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("log:");
      if (this.log == null) {
        sb.append("null");
      } else {
        sb.append(this.log);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldViewNumber:");
      sb.append(this.oldViewNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkPoint:");
      sb.append(this.checkPoint);
      first = false;
      if (!first) sb.append(", ");
      sb.append("opNumber:");
      sb.append(this.opNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("commitNumber:");
      sb.append(this.commitNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replicaNumber:");
      sb.append(this.replicaNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcDoViewChange_argsStandardSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_argsStandardScheme getScheme() {
        return new rpcDoViewChange_argsStandardScheme();
      }
    }

    private static class rpcDoViewChange_argsStandardScheme extends StandardScheme<rpcDoViewChange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_VIEW_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newViewNumber = iprot.readI32();
                struct.setNewViewNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.log = new ArrayList<Log>(_list24.size);
                  Log _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new Log();
                    _elem25.read(iprot);
                    struct.log.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setLogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OLD_VIEW_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.oldViewNumber = iprot.readI32();
                struct.setOldViewNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CHECK_POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.checkPoint = iprot.readI32();
                struct.setCheckPointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OP_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.opNumber = iprot.readI32();
                struct.setOpNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COMMIT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.commitNumber = iprot.readI32();
                struct.setCommitNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // REPLICA_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.replicaNumber = iprot.readI32();
                struct.setReplicaNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NEW_VIEW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.newViewNumber);
        oprot.writeFieldEnd();
        if (struct.log != null) {
          oprot.writeFieldBegin(LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.log.size()));
            for (Log _iter27 : struct.log)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OLD_VIEW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.oldViewNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHECK_POINT_FIELD_DESC);
        oprot.writeI32(struct.checkPoint);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OP_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.opNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMIT_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.commitNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLICA_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.replicaNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcDoViewChange_argsTupleSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_argsTupleScheme getScheme() {
        return new rpcDoViewChange_argsTupleScheme();
      }
    }

    private static class rpcDoViewChange_argsTupleScheme extends TupleScheme<rpcDoViewChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewViewNumber()) {
          optionals.set(0);
        }
        if (struct.isSetLog()) {
          optionals.set(1);
        }
        if (struct.isSetOldViewNumber()) {
          optionals.set(2);
        }
        if (struct.isSetCheckPoint()) {
          optionals.set(3);
        }
        if (struct.isSetOpNumber()) {
          optionals.set(4);
        }
        if (struct.isSetCommitNumber()) {
          optionals.set(5);
        }
        if (struct.isSetReplicaNumber()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetNewViewNumber()) {
          oprot.writeI32(struct.newViewNumber);
        }
        if (struct.isSetLog()) {
          {
            oprot.writeI32(struct.log.size());
            for (Log _iter28 : struct.log)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetOldViewNumber()) {
          oprot.writeI32(struct.oldViewNumber);
        }
        if (struct.isSetCheckPoint()) {
          oprot.writeI32(struct.checkPoint);
        }
        if (struct.isSetOpNumber()) {
          oprot.writeI32(struct.opNumber);
        }
        if (struct.isSetCommitNumber()) {
          oprot.writeI32(struct.commitNumber);
        }
        if (struct.isSetReplicaNumber()) {
          oprot.writeI32(struct.replicaNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.newViewNumber = iprot.readI32();
          struct.setNewViewNumberIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.log = new ArrayList<Log>(_list29.size);
            Log _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new Log();
              _elem30.read(iprot);
              struct.log.add(_elem30);
            }
          }
          struct.setLogIsSet(true);
        }
        if (incoming.get(2)) {
          struct.oldViewNumber = iprot.readI32();
          struct.setOldViewNumberIsSet(true);
        }
        if (incoming.get(3)) {
          struct.checkPoint = iprot.readI32();
          struct.setCheckPointIsSet(true);
        }
        if (incoming.get(4)) {
          struct.opNumber = iprot.readI32();
          struct.setOpNumberIsSet(true);
        }
        if (incoming.get(5)) {
          struct.commitNumber = iprot.readI32();
          struct.setCommitNumberIsSet(true);
        }
        if (incoming.get(6)) {
          struct.replicaNumber = iprot.readI32();
          struct.setReplicaNumberIsSet(true);
        }
      }
    }

  }

  public static class rpcDoViewChange_result implements org.apache.thrift.TBase<rpcDoViewChange_result, rpcDoViewChange_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcDoViewChange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcDoViewChange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcDoViewChange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcDoViewChange_resultTupleSchemeFactory());
    }

    public DoViewChangeResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DoViewChangeResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcDoViewChange_result.class, metaDataMap);
    }

    public rpcDoViewChange_result() {
    }

    public rpcDoViewChange_result(
      DoViewChangeResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcDoViewChange_result(rpcDoViewChange_result other) {
      if (other.isSetSuccess()) {
        this.success = new DoViewChangeResponse(other.success);
      }
    }

    public rpcDoViewChange_result deepCopy() {
      return new rpcDoViewChange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public DoViewChangeResponse getSuccess() {
      return this.success;
    }

    public rpcDoViewChange_result setSuccess(DoViewChangeResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DoViewChangeResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcDoViewChange_result)
        return this.equals((rpcDoViewChange_result)that);
      return false;
    }

    public boolean equals(rpcDoViewChange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcDoViewChange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcDoViewChange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcDoViewChange_resultStandardSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_resultStandardScheme getScheme() {
        return new rpcDoViewChange_resultStandardScheme();
      }
    }

    private static class rpcDoViewChange_resultStandardScheme extends StandardScheme<rpcDoViewChange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DoViewChangeResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcDoViewChange_resultTupleSchemeFactory implements SchemeFactory {
      public rpcDoViewChange_resultTupleScheme getScheme() {
        return new rpcDoViewChange_resultTupleScheme();
      }
    }

    private static class rpcDoViewChange_resultTupleScheme extends TupleScheme<rpcDoViewChange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcDoViewChange_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new DoViewChangeResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcStartView_args implements org.apache.thrift.TBase<rpcStartView_args, rpcStartView_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartView_args");

    private static final org.apache.thrift.protocol.TField VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("viewNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField LOG_FIELD_DESC = new org.apache.thrift.protocol.TField("log", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField CHECK_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("checkPoint", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OP_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("opNumber", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField COMMIT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("commitNumber", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartView_argsTupleSchemeFactory());
    }

    public int viewNumber; // required
    public List<Log> log; // required
    public int checkPoint; // required
    public int opNumber; // required
    public int commitNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIEW_NUMBER((short)1, "viewNumber"),
      LOG((short)2, "log"),
      CHECK_POINT((short)3, "checkPoint"),
      OP_NUMBER((short)4, "opNumber"),
      COMMIT_NUMBER((short)5, "commitNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIEW_NUMBER
            return VIEW_NUMBER;
          case 2: // LOG
            return LOG;
          case 3: // CHECK_POINT
            return CHECK_POINT;
          case 4: // OP_NUMBER
            return OP_NUMBER;
          case 5: // COMMIT_NUMBER
            return COMMIT_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VIEWNUMBER_ISSET_ID = 0;
    private static final int __CHECKPOINT_ISSET_ID = 1;
    private static final int __OPNUMBER_ISSET_ID = 2;
    private static final int __COMMITNUMBER_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("viewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LOG, new org.apache.thrift.meta_data.FieldMetaData("log", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Log.class))));
      tmpMap.put(_Fields.CHECK_POINT, new org.apache.thrift.meta_data.FieldMetaData("checkPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.OP_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("opNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.COMMIT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("commitNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartView_args.class, metaDataMap);
    }

    public rpcStartView_args() {
    }

    public rpcStartView_args(
      int viewNumber,
      List<Log> log,
      int checkPoint,
      int opNumber,
      int commitNumber)
    {
      this();
      this.viewNumber = viewNumber;
      setViewNumberIsSet(true);
      this.log = log;
      this.checkPoint = checkPoint;
      setCheckPointIsSet(true);
      this.opNumber = opNumber;
      setOpNumberIsSet(true);
      this.commitNumber = commitNumber;
      setCommitNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartView_args(rpcStartView_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.viewNumber = other.viewNumber;
      if (other.isSetLog()) {
        List<Log> __this__log = new ArrayList<Log>(other.log.size());
        for (Log other_element : other.log) {
          __this__log.add(new Log(other_element));
        }
        this.log = __this__log;
      }
      this.checkPoint = other.checkPoint;
      this.opNumber = other.opNumber;
      this.commitNumber = other.commitNumber;
    }

    public rpcStartView_args deepCopy() {
      return new rpcStartView_args(this);
    }

    @Override
    public void clear() {
      setViewNumberIsSet(false);
      this.viewNumber = 0;
      this.log = null;
      setCheckPointIsSet(false);
      this.checkPoint = 0;
      setOpNumberIsSet(false);
      this.opNumber = 0;
      setCommitNumberIsSet(false);
      this.commitNumber = 0;
    }

    public int getViewNumber() {
      return this.viewNumber;
    }

    public rpcStartView_args setViewNumber(int viewNumber) {
      this.viewNumber = viewNumber;
      setViewNumberIsSet(true);
      return this;
    }

    public void unsetViewNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
    }

    /** Returns true if field viewNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetViewNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
    }

    public void setViewNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID, value);
    }

    public int getLogSize() {
      return (this.log == null) ? 0 : this.log.size();
    }

    public java.util.Iterator<Log> getLogIterator() {
      return (this.log == null) ? null : this.log.iterator();
    }

    public void addToLog(Log elem) {
      if (this.log == null) {
        this.log = new ArrayList<Log>();
      }
      this.log.add(elem);
    }

    public List<Log> getLog() {
      return this.log;
    }

    public rpcStartView_args setLog(List<Log> log) {
      this.log = log;
      return this;
    }

    public void unsetLog() {
      this.log = null;
    }

    /** Returns true if field log is set (has been assigned a value) and false otherwise */
    public boolean isSetLog() {
      return this.log != null;
    }

    public void setLogIsSet(boolean value) {
      if (!value) {
        this.log = null;
      }
    }

    public int getCheckPoint() {
      return this.checkPoint;
    }

    public rpcStartView_args setCheckPoint(int checkPoint) {
      this.checkPoint = checkPoint;
      setCheckPointIsSet(true);
      return this;
    }

    public void unsetCheckPoint() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHECKPOINT_ISSET_ID);
    }

    /** Returns true if field checkPoint is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckPoint() {
      return EncodingUtils.testBit(__isset_bitfield, __CHECKPOINT_ISSET_ID);
    }

    public void setCheckPointIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHECKPOINT_ISSET_ID, value);
    }

    public int getOpNumber() {
      return this.opNumber;
    }

    public rpcStartView_args setOpNumber(int opNumber) {
      this.opNumber = opNumber;
      setOpNumberIsSet(true);
      return this;
    }

    public void unsetOpNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
    }

    /** Returns true if field opNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetOpNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
    }

    public void setOpNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPNUMBER_ISSET_ID, value);
    }

    public int getCommitNumber() {
      return this.commitNumber;
    }

    public rpcStartView_args setCommitNumber(int commitNumber) {
      this.commitNumber = commitNumber;
      setCommitNumberIsSet(true);
      return this;
    }

    public void unsetCommitNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID);
    }

    /** Returns true if field commitNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetCommitNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID);
    }

    public void setCommitNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMITNUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIEW_NUMBER:
        if (value == null) {
          unsetViewNumber();
        } else {
          setViewNumber((Integer)value);
        }
        break;

      case LOG:
        if (value == null) {
          unsetLog();
        } else {
          setLog((List<Log>)value);
        }
        break;

      case CHECK_POINT:
        if (value == null) {
          unsetCheckPoint();
        } else {
          setCheckPoint((Integer)value);
        }
        break;

      case OP_NUMBER:
        if (value == null) {
          unsetOpNumber();
        } else {
          setOpNumber((Integer)value);
        }
        break;

      case COMMIT_NUMBER:
        if (value == null) {
          unsetCommitNumber();
        } else {
          setCommitNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIEW_NUMBER:
        return Integer.valueOf(getViewNumber());

      case LOG:
        return getLog();

      case CHECK_POINT:
        return Integer.valueOf(getCheckPoint());

      case OP_NUMBER:
        return Integer.valueOf(getOpNumber());

      case COMMIT_NUMBER:
        return Integer.valueOf(getCommitNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIEW_NUMBER:
        return isSetViewNumber();
      case LOG:
        return isSetLog();
      case CHECK_POINT:
        return isSetCheckPoint();
      case OP_NUMBER:
        return isSetOpNumber();
      case COMMIT_NUMBER:
        return isSetCommitNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartView_args)
        return this.equals((rpcStartView_args)that);
      return false;
    }

    public boolean equals(rpcStartView_args that) {
      if (that == null)
        return false;

      boolean this_present_viewNumber = true;
      boolean that_present_viewNumber = true;
      if (this_present_viewNumber || that_present_viewNumber) {
        if (!(this_present_viewNumber && that_present_viewNumber))
          return false;
        if (this.viewNumber != that.viewNumber)
          return false;
      }

      boolean this_present_log = true && this.isSetLog();
      boolean that_present_log = true && that.isSetLog();
      if (this_present_log || that_present_log) {
        if (!(this_present_log && that_present_log))
          return false;
        if (!this.log.equals(that.log))
          return false;
      }

      boolean this_present_checkPoint = true;
      boolean that_present_checkPoint = true;
      if (this_present_checkPoint || that_present_checkPoint) {
        if (!(this_present_checkPoint && that_present_checkPoint))
          return false;
        if (this.checkPoint != that.checkPoint)
          return false;
      }

      boolean this_present_opNumber = true;
      boolean that_present_opNumber = true;
      if (this_present_opNumber || that_present_opNumber) {
        if (!(this_present_opNumber && that_present_opNumber))
          return false;
        if (this.opNumber != that.opNumber)
          return false;
      }

      boolean this_present_commitNumber = true;
      boolean that_present_commitNumber = true;
      if (this_present_commitNumber || that_present_commitNumber) {
        if (!(this_present_commitNumber && that_present_commitNumber))
          return false;
        if (this.commitNumber != that.commitNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_viewNumber = true;
      list.add(present_viewNumber);
      if (present_viewNumber)
        list.add(viewNumber);

      boolean present_log = true && (isSetLog());
      list.add(present_log);
      if (present_log)
        list.add(log);

      boolean present_checkPoint = true;
      list.add(present_checkPoint);
      if (present_checkPoint)
        list.add(checkPoint);

      boolean present_opNumber = true;
      list.add(present_opNumber);
      if (present_opNumber)
        list.add(opNumber);

      boolean present_commitNumber = true;
      list.add(present_commitNumber);
      if (present_commitNumber)
        list.add(commitNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetViewNumber()).compareTo(other.isSetViewNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetViewNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewNumber, other.viewNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLog()).compareTo(other.isSetLog());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLog()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.log, other.log);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCheckPoint()).compareTo(other.isSetCheckPoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckPoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkPoint, other.checkPoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpNumber()).compareTo(other.isSetOpNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opNumber, other.opNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCommitNumber()).compareTo(other.isSetCommitNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommitNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commitNumber, other.commitNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartView_args(");
      boolean first = true;

      sb.append("viewNumber:");
      sb.append(this.viewNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("log:");
      if (this.log == null) {
        sb.append("null");
      } else {
        sb.append(this.log);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkPoint:");
      sb.append(this.checkPoint);
      first = false;
      if (!first) sb.append(", ");
      sb.append("opNumber:");
      sb.append(this.opNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("commitNumber:");
      sb.append(this.commitNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartView_argsStandardSchemeFactory implements SchemeFactory {
      public rpcStartView_argsStandardScheme getScheme() {
        return new rpcStartView_argsStandardScheme();
      }
    }

    private static class rpcStartView_argsStandardScheme extends StandardScheme<rpcStartView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIEW_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.viewNumber = iprot.readI32();
                struct.setViewNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOG
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.log = new ArrayList<Log>(_list32.size);
                  Log _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new Log();
                    _elem33.read(iprot);
                    struct.log.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setLogIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHECK_POINT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.checkPoint = iprot.readI32();
                struct.setCheckPointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OP_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.opNumber = iprot.readI32();
                struct.setOpNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COMMIT_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.commitNumber = iprot.readI32();
                struct.setCommitNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VIEW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.viewNumber);
        oprot.writeFieldEnd();
        if (struct.log != null) {
          oprot.writeFieldBegin(LOG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.log.size()));
            for (Log _iter35 : struct.log)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHECK_POINT_FIELD_DESC);
        oprot.writeI32(struct.checkPoint);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OP_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.opNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COMMIT_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.commitNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartView_argsTupleSchemeFactory implements SchemeFactory {
      public rpcStartView_argsTupleScheme getScheme() {
        return new rpcStartView_argsTupleScheme();
      }
    }

    private static class rpcStartView_argsTupleScheme extends TupleScheme<rpcStartView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetViewNumber()) {
          optionals.set(0);
        }
        if (struct.isSetLog()) {
          optionals.set(1);
        }
        if (struct.isSetCheckPoint()) {
          optionals.set(2);
        }
        if (struct.isSetOpNumber()) {
          optionals.set(3);
        }
        if (struct.isSetCommitNumber()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetViewNumber()) {
          oprot.writeI32(struct.viewNumber);
        }
        if (struct.isSetLog()) {
          {
            oprot.writeI32(struct.log.size());
            for (Log _iter36 : struct.log)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetCheckPoint()) {
          oprot.writeI32(struct.checkPoint);
        }
        if (struct.isSetOpNumber()) {
          oprot.writeI32(struct.opNumber);
        }
        if (struct.isSetCommitNumber()) {
          oprot.writeI32(struct.commitNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.viewNumber = iprot.readI32();
          struct.setViewNumberIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.log = new ArrayList<Log>(_list37.size);
            Log _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new Log();
              _elem38.read(iprot);
              struct.log.add(_elem38);
            }
          }
          struct.setLogIsSet(true);
        }
        if (incoming.get(2)) {
          struct.checkPoint = iprot.readI32();
          struct.setCheckPointIsSet(true);
        }
        if (incoming.get(3)) {
          struct.opNumber = iprot.readI32();
          struct.setOpNumberIsSet(true);
        }
        if (incoming.get(4)) {
          struct.commitNumber = iprot.readI32();
          struct.setCommitNumberIsSet(true);
        }
      }
    }

  }

  public static class rpcStartView_result implements org.apache.thrift.TBase<rpcStartView_result, rpcStartView_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcStartView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcStartView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcStartView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcStartView_resultTupleSchemeFactory());
    }

    public StartViewResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StartViewResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcStartView_result.class, metaDataMap);
    }

    public rpcStartView_result() {
    }

    public rpcStartView_result(
      StartViewResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcStartView_result(rpcStartView_result other) {
      if (other.isSetSuccess()) {
        this.success = new StartViewResponse(other.success);
      }
    }

    public rpcStartView_result deepCopy() {
      return new rpcStartView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public StartViewResponse getSuccess() {
      return this.success;
    }

    public rpcStartView_result setSuccess(StartViewResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StartViewResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcStartView_result)
        return this.equals((rpcStartView_result)that);
      return false;
    }

    public boolean equals(rpcStartView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcStartView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcStartView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcStartView_resultStandardSchemeFactory implements SchemeFactory {
      public rpcStartView_resultStandardScheme getScheme() {
        return new rpcStartView_resultStandardScheme();
      }
    }

    private static class rpcStartView_resultStandardScheme extends StandardScheme<rpcStartView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcStartView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StartViewResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcStartView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcStartView_resultTupleSchemeFactory implements SchemeFactory {
      public rpcStartView_resultTupleScheme getScheme() {
        return new rpcStartView_resultTupleScheme();
      }
    }

    private static class rpcStartView_resultTupleScheme extends TupleScheme<rpcStartView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcStartView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcStartView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new StartViewResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcRecovery_args implements org.apache.thrift.TBase<rpcRecovery_args, rpcRecovery_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRecovery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRecovery_args");

    private static final org.apache.thrift.protocol.TField REPLICA_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NONCE_FIELD_DESC = new org.apache.thrift.protocol.TField("nonce", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRecovery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRecovery_argsTupleSchemeFactory());
    }

    public int replicaNumber; // required
    public byte nonce; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REPLICA_NUMBER((short)1, "replicaNumber"),
      NONCE((short)2, "nonce");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REPLICA_NUMBER
            return REPLICA_NUMBER;
          case 2: // NONCE
            return NONCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPLICANUMBER_ISSET_ID = 0;
    private static final int __NONCE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REPLICA_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("replicaNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.NONCE, new org.apache.thrift.meta_data.FieldMetaData("nonce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRecovery_args.class, metaDataMap);
    }

    public rpcRecovery_args() {
    }

    public rpcRecovery_args(
      int replicaNumber,
      byte nonce)
    {
      this();
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
      this.nonce = nonce;
      setNonceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRecovery_args(rpcRecovery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.replicaNumber = other.replicaNumber;
      this.nonce = other.nonce;
    }

    public rpcRecovery_args deepCopy() {
      return new rpcRecovery_args(this);
    }

    @Override
    public void clear() {
      setReplicaNumberIsSet(false);
      this.replicaNumber = 0;
      setNonceIsSet(false);
      this.nonce = 0;
    }

    public int getReplicaNumber() {
      return this.replicaNumber;
    }

    public rpcRecovery_args setReplicaNumber(int replicaNumber) {
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
      return this;
    }

    public void unsetReplicaNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    /** Returns true if field replicaNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetReplicaNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    public void setReplicaNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID, value);
    }

    public byte getNonce() {
      return this.nonce;
    }

    public rpcRecovery_args setNonce(byte nonce) {
      this.nonce = nonce;
      setNonceIsSet(true);
      return this;
    }

    public void unsetNonce() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONCE_ISSET_ID);
    }

    /** Returns true if field nonce is set (has been assigned a value) and false otherwise */
    public boolean isSetNonce() {
      return EncodingUtils.testBit(__isset_bitfield, __NONCE_ISSET_ID);
    }

    public void setNonceIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REPLICA_NUMBER:
        if (value == null) {
          unsetReplicaNumber();
        } else {
          setReplicaNumber((Integer)value);
        }
        break;

      case NONCE:
        if (value == null) {
          unsetNonce();
        } else {
          setNonce((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REPLICA_NUMBER:
        return Integer.valueOf(getReplicaNumber());

      case NONCE:
        return Byte.valueOf(getNonce());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REPLICA_NUMBER:
        return isSetReplicaNumber();
      case NONCE:
        return isSetNonce();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRecovery_args)
        return this.equals((rpcRecovery_args)that);
      return false;
    }

    public boolean equals(rpcRecovery_args that) {
      if (that == null)
        return false;

      boolean this_present_replicaNumber = true;
      boolean that_present_replicaNumber = true;
      if (this_present_replicaNumber || that_present_replicaNumber) {
        if (!(this_present_replicaNumber && that_present_replicaNumber))
          return false;
        if (this.replicaNumber != that.replicaNumber)
          return false;
      }

      boolean this_present_nonce = true;
      boolean that_present_nonce = true;
      if (this_present_nonce || that_present_nonce) {
        if (!(this_present_nonce && that_present_nonce))
          return false;
        if (this.nonce != that.nonce)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_replicaNumber = true;
      list.add(present_replicaNumber);
      if (present_replicaNumber)
        list.add(replicaNumber);

      boolean present_nonce = true;
      list.add(present_nonce);
      if (present_nonce)
        list.add(nonce);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRecovery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReplicaNumber()).compareTo(other.isSetReplicaNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplicaNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaNumber, other.replicaNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNonce()).compareTo(other.isSetNonce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNonce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonce, other.nonce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRecovery_args(");
      boolean first = true;

      sb.append("replicaNumber:");
      sb.append(this.replicaNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nonce:");
      sb.append(this.nonce);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRecovery_argsStandardSchemeFactory implements SchemeFactory {
      public rpcRecovery_argsStandardScheme getScheme() {
        return new rpcRecovery_argsStandardScheme();
      }
    }

    private static class rpcRecovery_argsStandardScheme extends StandardScheme<rpcRecovery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REPLICA_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.replicaNumber = iprot.readI32();
                struct.setReplicaNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NONCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.nonce = iprot.readByte();
                struct.setNonceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REPLICA_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.replicaNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NONCE_FIELD_DESC);
        oprot.writeByte(struct.nonce);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRecovery_argsTupleSchemeFactory implements SchemeFactory {
      public rpcRecovery_argsTupleScheme getScheme() {
        return new rpcRecovery_argsTupleScheme();
      }
    }

    private static class rpcRecovery_argsTupleScheme extends TupleScheme<rpcRecovery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReplicaNumber()) {
          optionals.set(0);
        }
        if (struct.isSetNonce()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReplicaNumber()) {
          oprot.writeI32(struct.replicaNumber);
        }
        if (struct.isSetNonce()) {
          oprot.writeByte(struct.nonce);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.replicaNumber = iprot.readI32();
          struct.setReplicaNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nonce = iprot.readByte();
          struct.setNonceIsSet(true);
        }
      }
    }

  }

  public static class rpcRecovery_result implements org.apache.thrift.TBase<rpcRecovery_result, rpcRecovery_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcRecovery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcRecovery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcRecovery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcRecovery_resultTupleSchemeFactory());
    }

    public RecoveryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecoveryResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcRecovery_result.class, metaDataMap);
    }

    public rpcRecovery_result() {
    }

    public rpcRecovery_result(
      RecoveryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcRecovery_result(rpcRecovery_result other) {
      if (other.isSetSuccess()) {
        this.success = new RecoveryResponse(other.success);
      }
    }

    public rpcRecovery_result deepCopy() {
      return new rpcRecovery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RecoveryResponse getSuccess() {
      return this.success;
    }

    public rpcRecovery_result setSuccess(RecoveryResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RecoveryResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcRecovery_result)
        return this.equals((rpcRecovery_result)that);
      return false;
    }

    public boolean equals(rpcRecovery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcRecovery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcRecovery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcRecovery_resultStandardSchemeFactory implements SchemeFactory {
      public rpcRecovery_resultStandardScheme getScheme() {
        return new rpcRecovery_resultStandardScheme();
      }
    }

    private static class rpcRecovery_resultStandardScheme extends StandardScheme<rpcRecovery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RecoveryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcRecovery_resultTupleSchemeFactory implements SchemeFactory {
      public rpcRecovery_resultTupleScheme getScheme() {
        return new rpcRecovery_resultTupleScheme();
      }
    }

    private static class rpcRecovery_resultTupleScheme extends TupleScheme<rpcRecovery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RecoveryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rpcGetState_args implements org.apache.thrift.TBase<rpcGetState_args, rpcGetState_args._Fields>, java.io.Serializable, Cloneable, Comparable<rpcGetState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcGetState_args");

    private static final org.apache.thrift.protocol.TField VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("viewNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField OP_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("opNumber", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REPLICA_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("replicaNumber", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcGetState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcGetState_argsTupleSchemeFactory());
    }

    public int viewNumber; // required
    public int opNumber; // required
    public int replicaNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIEW_NUMBER((short)1, "viewNumber"),
      OP_NUMBER((short)2, "opNumber"),
      REPLICA_NUMBER((short)3, "replicaNumber");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIEW_NUMBER
            return VIEW_NUMBER;
          case 2: // OP_NUMBER
            return OP_NUMBER;
          case 3: // REPLICA_NUMBER
            return REPLICA_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VIEWNUMBER_ISSET_ID = 0;
    private static final int __OPNUMBER_ISSET_ID = 1;
    private static final int __REPLICANUMBER_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("viewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.OP_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("opNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.REPLICA_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("replicaNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcGetState_args.class, metaDataMap);
    }

    public rpcGetState_args() {
    }

    public rpcGetState_args(
      int viewNumber,
      int opNumber,
      int replicaNumber)
    {
      this();
      this.viewNumber = viewNumber;
      setViewNumberIsSet(true);
      this.opNumber = opNumber;
      setOpNumberIsSet(true);
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcGetState_args(rpcGetState_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.viewNumber = other.viewNumber;
      this.opNumber = other.opNumber;
      this.replicaNumber = other.replicaNumber;
    }

    public rpcGetState_args deepCopy() {
      return new rpcGetState_args(this);
    }

    @Override
    public void clear() {
      setViewNumberIsSet(false);
      this.viewNumber = 0;
      setOpNumberIsSet(false);
      this.opNumber = 0;
      setReplicaNumberIsSet(false);
      this.replicaNumber = 0;
    }

    public int getViewNumber() {
      return this.viewNumber;
    }

    public rpcGetState_args setViewNumber(int viewNumber) {
      this.viewNumber = viewNumber;
      setViewNumberIsSet(true);
      return this;
    }

    public void unsetViewNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
    }

    /** Returns true if field viewNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetViewNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
    }

    public void setViewNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID, value);
    }

    public int getOpNumber() {
      return this.opNumber;
    }

    public rpcGetState_args setOpNumber(int opNumber) {
      this.opNumber = opNumber;
      setOpNumberIsSet(true);
      return this;
    }

    public void unsetOpNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
    }

    /** Returns true if field opNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetOpNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
    }

    public void setOpNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPNUMBER_ISSET_ID, value);
    }

    public int getReplicaNumber() {
      return this.replicaNumber;
    }

    public rpcGetState_args setReplicaNumber(int replicaNumber) {
      this.replicaNumber = replicaNumber;
      setReplicaNumberIsSet(true);
      return this;
    }

    public void unsetReplicaNumber() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    /** Returns true if field replicaNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetReplicaNumber() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID);
    }

    public void setReplicaNumberIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLICANUMBER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIEW_NUMBER:
        if (value == null) {
          unsetViewNumber();
        } else {
          setViewNumber((Integer)value);
        }
        break;

      case OP_NUMBER:
        if (value == null) {
          unsetOpNumber();
        } else {
          setOpNumber((Integer)value);
        }
        break;

      case REPLICA_NUMBER:
        if (value == null) {
          unsetReplicaNumber();
        } else {
          setReplicaNumber((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIEW_NUMBER:
        return Integer.valueOf(getViewNumber());

      case OP_NUMBER:
        return Integer.valueOf(getOpNumber());

      case REPLICA_NUMBER:
        return Integer.valueOf(getReplicaNumber());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIEW_NUMBER:
        return isSetViewNumber();
      case OP_NUMBER:
        return isSetOpNumber();
      case REPLICA_NUMBER:
        return isSetReplicaNumber();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcGetState_args)
        return this.equals((rpcGetState_args)that);
      return false;
    }

    public boolean equals(rpcGetState_args that) {
      if (that == null)
        return false;

      boolean this_present_viewNumber = true;
      boolean that_present_viewNumber = true;
      if (this_present_viewNumber || that_present_viewNumber) {
        if (!(this_present_viewNumber && that_present_viewNumber))
          return false;
        if (this.viewNumber != that.viewNumber)
          return false;
      }

      boolean this_present_opNumber = true;
      boolean that_present_opNumber = true;
      if (this_present_opNumber || that_present_opNumber) {
        if (!(this_present_opNumber && that_present_opNumber))
          return false;
        if (this.opNumber != that.opNumber)
          return false;
      }

      boolean this_present_replicaNumber = true;
      boolean that_present_replicaNumber = true;
      if (this_present_replicaNumber || that_present_replicaNumber) {
        if (!(this_present_replicaNumber && that_present_replicaNumber))
          return false;
        if (this.replicaNumber != that.replicaNumber)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_viewNumber = true;
      list.add(present_viewNumber);
      if (present_viewNumber)
        list.add(viewNumber);

      boolean present_opNumber = true;
      list.add(present_opNumber);
      if (present_opNumber)
        list.add(opNumber);

      boolean present_replicaNumber = true;
      list.add(present_replicaNumber);
      if (present_replicaNumber)
        list.add(replicaNumber);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcGetState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetViewNumber()).compareTo(other.isSetViewNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetViewNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewNumber, other.viewNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpNumber()).compareTo(other.isSetOpNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opNumber, other.opNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplicaNumber()).compareTo(other.isSetReplicaNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplicaNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicaNumber, other.replicaNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcGetState_args(");
      boolean first = true;

      sb.append("viewNumber:");
      sb.append(this.viewNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("opNumber:");
      sb.append(this.opNumber);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replicaNumber:");
      sb.append(this.replicaNumber);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcGetState_argsStandardSchemeFactory implements SchemeFactory {
      public rpcGetState_argsStandardScheme getScheme() {
        return new rpcGetState_argsStandardScheme();
      }
    }

    private static class rpcGetState_argsStandardScheme extends StandardScheme<rpcGetState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcGetState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIEW_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.viewNumber = iprot.readI32();
                struct.setViewNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OP_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.opNumber = iprot.readI32();
                struct.setOpNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REPLICA_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.replicaNumber = iprot.readI32();
                struct.setReplicaNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcGetState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VIEW_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.viewNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OP_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.opNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLICA_NUMBER_FIELD_DESC);
        oprot.writeI32(struct.replicaNumber);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcGetState_argsTupleSchemeFactory implements SchemeFactory {
      public rpcGetState_argsTupleScheme getScheme() {
        return new rpcGetState_argsTupleScheme();
      }
    }

    private static class rpcGetState_argsTupleScheme extends TupleScheme<rpcGetState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcGetState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetViewNumber()) {
          optionals.set(0);
        }
        if (struct.isSetOpNumber()) {
          optionals.set(1);
        }
        if (struct.isSetReplicaNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetViewNumber()) {
          oprot.writeI32(struct.viewNumber);
        }
        if (struct.isSetOpNumber()) {
          oprot.writeI32(struct.opNumber);
        }
        if (struct.isSetReplicaNumber()) {
          oprot.writeI32(struct.replicaNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcGetState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.viewNumber = iprot.readI32();
          struct.setViewNumberIsSet(true);
        }
        if (incoming.get(1)) {
          struct.opNumber = iprot.readI32();
          struct.setOpNumberIsSet(true);
        }
        if (incoming.get(2)) {
          struct.replicaNumber = iprot.readI32();
          struct.setReplicaNumberIsSet(true);
        }
      }
    }

  }

  public static class rpcGetState_result implements org.apache.thrift.TBase<rpcGetState_result, rpcGetState_result._Fields>, java.io.Serializable, Cloneable, Comparable<rpcGetState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rpcGetState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rpcGetState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rpcGetState_resultTupleSchemeFactory());
    }

    public GetStateResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GetStateResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rpcGetState_result.class, metaDataMap);
    }

    public rpcGetState_result() {
    }

    public rpcGetState_result(
      GetStateResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rpcGetState_result(rpcGetState_result other) {
      if (other.isSetSuccess()) {
        this.success = new GetStateResponse(other.success);
      }
    }

    public rpcGetState_result deepCopy() {
      return new rpcGetState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GetStateResponse getSuccess() {
      return this.success;
    }

    public rpcGetState_result setSuccess(GetStateResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GetStateResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rpcGetState_result)
        return this.equals((rpcGetState_result)that);
      return false;
    }

    public boolean equals(rpcGetState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rpcGetState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rpcGetState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rpcGetState_resultStandardSchemeFactory implements SchemeFactory {
      public rpcGetState_resultStandardScheme getScheme() {
        return new rpcGetState_resultStandardScheme();
      }
    }

    private static class rpcGetState_resultStandardScheme extends StandardScheme<rpcGetState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rpcGetState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GetStateResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rpcGetState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rpcGetState_resultTupleSchemeFactory implements SchemeFactory {
      public rpcGetState_resultTupleScheme getScheme() {
        return new rpcGetState_resultTupleScheme();
      }
    }

    private static class rpcGetState_resultTupleScheme extends TupleScheme<rpcGetState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rpcGetState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rpcGetState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GetStateResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
