/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-11")
public class RequestResponse implements org.apache.thrift.TBase<RequestResponse, RequestResponse._Fields>, java.io.Serializable, Cloneable, Comparable<RequestResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestResponse");

  private static final org.apache.thrift.protocol.TField VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("viewNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_RESPONSE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestResponseCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REQUEST_UNION_FIELD_DESC = new org.apache.thrift.protocol.TField("requestUnion", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestResponseTupleSchemeFactory());
  }

  public int viewNumber; // required
  /**
   * 
   * @see RequestResponseCode
   */
  public RequestResponseCode requestResponseCode; // required
  public RequestUnion requestUnion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VIEW_NUMBER((short)1, "viewNumber"),
    /**
     * 
     * @see RequestResponseCode
     */
    REQUEST_RESPONSE_CODE((short)2, "requestResponseCode"),
    REQUEST_UNION((short)3, "requestUnion");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VIEW_NUMBER
          return VIEW_NUMBER;
        case 2: // REQUEST_RESPONSE_CODE
          return REQUEST_RESPONSE_CODE;
        case 3: // REQUEST_UNION
          return REQUEST_UNION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VIEWNUMBER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("viewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.REQUEST_RESPONSE_CODE, new org.apache.thrift.meta_data.FieldMetaData("requestResponseCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RequestResponseCode.class)));
    tmpMap.put(_Fields.REQUEST_UNION, new org.apache.thrift.meta_data.FieldMetaData("requestUnion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestUnion.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestResponse.class, metaDataMap);
  }

  public RequestResponse() {
  }

  public RequestResponse(
    int viewNumber,
    RequestResponseCode requestResponseCode,
    RequestUnion requestUnion)
  {
    this();
    this.viewNumber = viewNumber;
    setViewNumberIsSet(true);
    this.requestResponseCode = requestResponseCode;
    this.requestUnion = requestUnion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestResponse(RequestResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.viewNumber = other.viewNumber;
    if (other.isSetRequestResponseCode()) {
      this.requestResponseCode = other.requestResponseCode;
    }
    if (other.isSetRequestUnion()) {
      this.requestUnion = new RequestUnion(other.requestUnion);
    }
  }

  public RequestResponse deepCopy() {
    return new RequestResponse(this);
  }

  @Override
  public void clear() {
    setViewNumberIsSet(false);
    this.viewNumber = 0;
    this.requestResponseCode = null;
    this.requestUnion = null;
  }

  public int getViewNumber() {
    return this.viewNumber;
  }

  public RequestResponse setViewNumber(int viewNumber) {
    this.viewNumber = viewNumber;
    setViewNumberIsSet(true);
    return this;
  }

  public void unsetViewNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  /** Returns true if field viewNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetViewNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  public void setViewNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID, value);
  }

  /**
   * 
   * @see RequestResponseCode
   */
  public RequestResponseCode getRequestResponseCode() {
    return this.requestResponseCode;
  }

  /**
   * 
   * @see RequestResponseCode
   */
  public RequestResponse setRequestResponseCode(RequestResponseCode requestResponseCode) {
    this.requestResponseCode = requestResponseCode;
    return this;
  }

  public void unsetRequestResponseCode() {
    this.requestResponseCode = null;
  }

  /** Returns true if field requestResponseCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestResponseCode() {
    return this.requestResponseCode != null;
  }

  public void setRequestResponseCodeIsSet(boolean value) {
    if (!value) {
      this.requestResponseCode = null;
    }
  }

  public RequestUnion getRequestUnion() {
    return this.requestUnion;
  }

  public RequestResponse setRequestUnion(RequestUnion requestUnion) {
    this.requestUnion = requestUnion;
    return this;
  }

  public void unsetRequestUnion() {
    this.requestUnion = null;
  }

  /** Returns true if field requestUnion is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestUnion() {
    return this.requestUnion != null;
  }

  public void setRequestUnionIsSet(boolean value) {
    if (!value) {
      this.requestUnion = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VIEW_NUMBER:
      if (value == null) {
        unsetViewNumber();
      } else {
        setViewNumber((Integer)value);
      }
      break;

    case REQUEST_RESPONSE_CODE:
      if (value == null) {
        unsetRequestResponseCode();
      } else {
        setRequestResponseCode((RequestResponseCode)value);
      }
      break;

    case REQUEST_UNION:
      if (value == null) {
        unsetRequestUnion();
      } else {
        setRequestUnion((RequestUnion)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VIEW_NUMBER:
      return Integer.valueOf(getViewNumber());

    case REQUEST_RESPONSE_CODE:
      return getRequestResponseCode();

    case REQUEST_UNION:
      return getRequestUnion();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VIEW_NUMBER:
      return isSetViewNumber();
    case REQUEST_RESPONSE_CODE:
      return isSetRequestResponseCode();
    case REQUEST_UNION:
      return isSetRequestUnion();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestResponse)
      return this.equals((RequestResponse)that);
    return false;
  }

  public boolean equals(RequestResponse that) {
    if (that == null)
      return false;

    boolean this_present_viewNumber = true;
    boolean that_present_viewNumber = true;
    if (this_present_viewNumber || that_present_viewNumber) {
      if (!(this_present_viewNumber && that_present_viewNumber))
        return false;
      if (this.viewNumber != that.viewNumber)
        return false;
    }

    boolean this_present_requestResponseCode = true && this.isSetRequestResponseCode();
    boolean that_present_requestResponseCode = true && that.isSetRequestResponseCode();
    if (this_present_requestResponseCode || that_present_requestResponseCode) {
      if (!(this_present_requestResponseCode && that_present_requestResponseCode))
        return false;
      if (!this.requestResponseCode.equals(that.requestResponseCode))
        return false;
    }

    boolean this_present_requestUnion = true && this.isSetRequestUnion();
    boolean that_present_requestUnion = true && that.isSetRequestUnion();
    if (this_present_requestUnion || that_present_requestUnion) {
      if (!(this_present_requestUnion && that_present_requestUnion))
        return false;
      if (!this.requestUnion.equals(that.requestUnion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_viewNumber = true;
    list.add(present_viewNumber);
    if (present_viewNumber)
      list.add(viewNumber);

    boolean present_requestResponseCode = true && (isSetRequestResponseCode());
    list.add(present_requestResponseCode);
    if (present_requestResponseCode)
      list.add(requestResponseCode.getValue());

    boolean present_requestUnion = true && (isSetRequestUnion());
    list.add(present_requestUnion);
    if (present_requestUnion)
      list.add(requestUnion);

    return list.hashCode();
  }

  @Override
  public int compareTo(RequestResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetViewNumber()).compareTo(other.isSetViewNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewNumber, other.viewNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestResponseCode()).compareTo(other.isSetRequestResponseCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestResponseCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestResponseCode, other.requestResponseCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestUnion()).compareTo(other.isSetRequestUnion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestUnion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestUnion, other.requestUnion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestResponse(");
    boolean first = true;

    sb.append("viewNumber:");
    sb.append(this.viewNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestResponseCode:");
    if (this.requestResponseCode == null) {
      sb.append("null");
    } else {
      sb.append(this.requestResponseCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestUnion:");
    if (this.requestUnion == null) {
      sb.append("null");
    } else {
      sb.append(this.requestUnion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestResponseStandardSchemeFactory implements SchemeFactory {
    public RequestResponseStandardScheme getScheme() {
      return new RequestResponseStandardScheme();
    }
  }

  private static class RequestResponseStandardScheme extends StandardScheme<RequestResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VIEW_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewNumber = iprot.readI32();
              struct.setViewNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_RESPONSE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestResponseCode = vr.thrift.RequestResponseCode.findByValue(iprot.readI32());
              struct.setRequestResponseCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REQUEST_UNION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.requestUnion = new RequestUnion();
              struct.requestUnion.read(iprot);
              struct.setRequestUnionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VIEW_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.viewNumber);
      oprot.writeFieldEnd();
      if (struct.requestResponseCode != null) {
        oprot.writeFieldBegin(REQUEST_RESPONSE_CODE_FIELD_DESC);
        oprot.writeI32(struct.requestResponseCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.requestUnion != null) {
        oprot.writeFieldBegin(REQUEST_UNION_FIELD_DESC);
        struct.requestUnion.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestResponseTupleSchemeFactory implements SchemeFactory {
    public RequestResponseTupleScheme getScheme() {
      return new RequestResponseTupleScheme();
    }
  }

  private static class RequestResponseTupleScheme extends TupleScheme<RequestResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetViewNumber()) {
        optionals.set(0);
      }
      if (struct.isSetRequestResponseCode()) {
        optionals.set(1);
      }
      if (struct.isSetRequestUnion()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetViewNumber()) {
        oprot.writeI32(struct.viewNumber);
      }
      if (struct.isSetRequestResponseCode()) {
        oprot.writeI32(struct.requestResponseCode.getValue());
      }
      if (struct.isSetRequestUnion()) {
        struct.requestUnion.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.viewNumber = iprot.readI32();
        struct.setViewNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.requestResponseCode = vr.thrift.RequestResponseCode.findByValue(iprot.readI32());
        struct.setRequestResponseCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.requestUnion = new RequestUnion();
        struct.requestUnion.read(iprot);
        struct.setRequestUnionIsSet(true);
      }
    }
  }

}

