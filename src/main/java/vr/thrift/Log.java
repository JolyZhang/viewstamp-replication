/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vr.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-11")
public class Log implements org.apache.thrift.TBase<Log, Log._Fields>, java.io.Serializable, Cloneable, Comparable<Log> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Log");

  private static final org.apache.thrift.protocol.TField OP_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("opNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VIEW_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("viewNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("operation", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOG_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("logStatus", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LogStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LogTupleSchemeFactory());
  }

  public int opNumber; // required
  public int viewNumber; // required
  public String operation; // required
  /**
   * 
   * @see LogStatus
   */
  public LogStatus logStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OP_NUMBER((short)1, "opNumber"),
    VIEW_NUMBER((short)2, "viewNumber"),
    OPERATION((short)3, "operation"),
    /**
     * 
     * @see LogStatus
     */
    LOG_STATUS((short)4, "logStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OP_NUMBER
          return OP_NUMBER;
        case 2: // VIEW_NUMBER
          return VIEW_NUMBER;
        case 3: // OPERATION
          return OPERATION;
        case 4: // LOG_STATUS
          return LOG_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPNUMBER_ISSET_ID = 0;
  private static final int __VIEWNUMBER_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OP_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("opNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.VIEW_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("viewNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
    tmpMap.put(_Fields.OPERATION, new org.apache.thrift.meta_data.FieldMetaData("operation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOG_STATUS, new org.apache.thrift.meta_data.FieldMetaData("logStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LogStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Log.class, metaDataMap);
  }

  public Log() {
  }

  public Log(
    int opNumber,
    int viewNumber,
    String operation,
    LogStatus logStatus)
  {
    this();
    this.opNumber = opNumber;
    setOpNumberIsSet(true);
    this.viewNumber = viewNumber;
    setViewNumberIsSet(true);
    this.operation = operation;
    this.logStatus = logStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Log(Log other) {
    __isset_bitfield = other.__isset_bitfield;
    this.opNumber = other.opNumber;
    this.viewNumber = other.viewNumber;
    if (other.isSetOperation()) {
      this.operation = other.operation;
    }
    if (other.isSetLogStatus()) {
      this.logStatus = other.logStatus;
    }
  }

  public Log deepCopy() {
    return new Log(this);
  }

  @Override
  public void clear() {
    setOpNumberIsSet(false);
    this.opNumber = 0;
    setViewNumberIsSet(false);
    this.viewNumber = 0;
    this.operation = null;
    this.logStatus = null;
  }

  public int getOpNumber() {
    return this.opNumber;
  }

  public Log setOpNumber(int opNumber) {
    this.opNumber = opNumber;
    setOpNumberIsSet(true);
    return this;
  }

  public void unsetOpNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
  }

  /** Returns true if field opNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetOpNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __OPNUMBER_ISSET_ID);
  }

  public void setOpNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPNUMBER_ISSET_ID, value);
  }

  public int getViewNumber() {
    return this.viewNumber;
  }

  public Log setViewNumber(int viewNumber) {
    this.viewNumber = viewNumber;
    setViewNumberIsSet(true);
    return this;
  }

  public void unsetViewNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  /** Returns true if field viewNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetViewNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID);
  }

  public void setViewNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWNUMBER_ISSET_ID, value);
  }

  public String getOperation() {
    return this.operation;
  }

  public Log setOperation(String operation) {
    this.operation = operation;
    return this;
  }

  public void unsetOperation() {
    this.operation = null;
  }

  /** Returns true if field operation is set (has been assigned a value) and false otherwise */
  public boolean isSetOperation() {
    return this.operation != null;
  }

  public void setOperationIsSet(boolean value) {
    if (!value) {
      this.operation = null;
    }
  }

  /**
   * 
   * @see LogStatus
   */
  public LogStatus getLogStatus() {
    return this.logStatus;
  }

  /**
   * 
   * @see LogStatus
   */
  public Log setLogStatus(LogStatus logStatus) {
    this.logStatus = logStatus;
    return this;
  }

  public void unsetLogStatus() {
    this.logStatus = null;
  }

  /** Returns true if field logStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetLogStatus() {
    return this.logStatus != null;
  }

  public void setLogStatusIsSet(boolean value) {
    if (!value) {
      this.logStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OP_NUMBER:
      if (value == null) {
        unsetOpNumber();
      } else {
        setOpNumber((Integer)value);
      }
      break;

    case VIEW_NUMBER:
      if (value == null) {
        unsetViewNumber();
      } else {
        setViewNumber((Integer)value);
      }
      break;

    case OPERATION:
      if (value == null) {
        unsetOperation();
      } else {
        setOperation((String)value);
      }
      break;

    case LOG_STATUS:
      if (value == null) {
        unsetLogStatus();
      } else {
        setLogStatus((LogStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OP_NUMBER:
      return Integer.valueOf(getOpNumber());

    case VIEW_NUMBER:
      return Integer.valueOf(getViewNumber());

    case OPERATION:
      return getOperation();

    case LOG_STATUS:
      return getLogStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OP_NUMBER:
      return isSetOpNumber();
    case VIEW_NUMBER:
      return isSetViewNumber();
    case OPERATION:
      return isSetOperation();
    case LOG_STATUS:
      return isSetLogStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Log)
      return this.equals((Log)that);
    return false;
  }

  public boolean equals(Log that) {
    if (that == null)
      return false;

    boolean this_present_opNumber = true;
    boolean that_present_opNumber = true;
    if (this_present_opNumber || that_present_opNumber) {
      if (!(this_present_opNumber && that_present_opNumber))
        return false;
      if (this.opNumber != that.opNumber)
        return false;
    }

    boolean this_present_viewNumber = true;
    boolean that_present_viewNumber = true;
    if (this_present_viewNumber || that_present_viewNumber) {
      if (!(this_present_viewNumber && that_present_viewNumber))
        return false;
      if (this.viewNumber != that.viewNumber)
        return false;
    }

    boolean this_present_operation = true && this.isSetOperation();
    boolean that_present_operation = true && that.isSetOperation();
    if (this_present_operation || that_present_operation) {
      if (!(this_present_operation && that_present_operation))
        return false;
      if (!this.operation.equals(that.operation))
        return false;
    }

    boolean this_present_logStatus = true && this.isSetLogStatus();
    boolean that_present_logStatus = true && that.isSetLogStatus();
    if (this_present_logStatus || that_present_logStatus) {
      if (!(this_present_logStatus && that_present_logStatus))
        return false;
      if (!this.logStatus.equals(that.logStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_opNumber = true;
    list.add(present_opNumber);
    if (present_opNumber)
      list.add(opNumber);

    boolean present_viewNumber = true;
    list.add(present_viewNumber);
    if (present_viewNumber)
      list.add(viewNumber);

    boolean present_operation = true && (isSetOperation());
    list.add(present_operation);
    if (present_operation)
      list.add(operation);

    boolean present_logStatus = true && (isSetLogStatus());
    list.add(present_logStatus);
    if (present_logStatus)
      list.add(logStatus.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(Log other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOpNumber()).compareTo(other.isSetOpNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opNumber, other.opNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewNumber()).compareTo(other.isSetViewNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewNumber, other.viewNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperation()).compareTo(other.isSetOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operation, other.operation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogStatus()).compareTo(other.isSetLogStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logStatus, other.logStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Log(");
    boolean first = true;

    sb.append("opNumber:");
    sb.append(this.opNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewNumber:");
    sb.append(this.viewNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operation:");
    if (this.operation == null) {
      sb.append("null");
    } else {
      sb.append(this.operation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logStatus:");
    if (this.logStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.logStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LogStandardSchemeFactory implements SchemeFactory {
    public LogStandardScheme getScheme() {
      return new LogStandardScheme();
    }
  }

  private static class LogStandardScheme extends StandardScheme<Log> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Log struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OP_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opNumber = iprot.readI32();
              struct.setOpNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VIEW_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewNumber = iprot.readI32();
              struct.setViewNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operation = iprot.readString();
              struct.setOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOG_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.logStatus = vr.thrift.LogStatus.findByValue(iprot.readI32());
              struct.setLogStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Log struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OP_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.opNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VIEW_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.viewNumber);
      oprot.writeFieldEnd();
      if (struct.operation != null) {
        oprot.writeFieldBegin(OPERATION_FIELD_DESC);
        oprot.writeString(struct.operation);
        oprot.writeFieldEnd();
      }
      if (struct.logStatus != null) {
        oprot.writeFieldBegin(LOG_STATUS_FIELD_DESC);
        oprot.writeI32(struct.logStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LogTupleSchemeFactory implements SchemeFactory {
    public LogTupleScheme getScheme() {
      return new LogTupleScheme();
    }
  }

  private static class LogTupleScheme extends TupleScheme<Log> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Log struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOpNumber()) {
        optionals.set(0);
      }
      if (struct.isSetViewNumber()) {
        optionals.set(1);
      }
      if (struct.isSetOperation()) {
        optionals.set(2);
      }
      if (struct.isSetLogStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOpNumber()) {
        oprot.writeI32(struct.opNumber);
      }
      if (struct.isSetViewNumber()) {
        oprot.writeI32(struct.viewNumber);
      }
      if (struct.isSetOperation()) {
        oprot.writeString(struct.operation);
      }
      if (struct.isSetLogStatus()) {
        oprot.writeI32(struct.logStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Log struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.opNumber = iprot.readI32();
        struct.setOpNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.viewNumber = iprot.readI32();
        struct.setViewNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.operation = iprot.readString();
        struct.setOperationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.logStatus = vr.thrift.LogStatus.findByValue(iprot.readI32());
        struct.setLogStatusIsSet(true);
      }
    }
  }

}

