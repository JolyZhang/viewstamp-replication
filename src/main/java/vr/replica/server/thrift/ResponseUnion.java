/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package vr.replica.server.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
public class ResponseUnion extends org.apache.thrift.TUnion<ResponseUnion, ResponseUnion._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseUnion");
  private static final org.apache.thrift.protocol.TField REDIRECT_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("redirectResponse", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ACCEPTED_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedResponse", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUCCESS_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("successResponse", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FAILURE_RESPONSE_FIELD_DESC = new org.apache.thrift.protocol.TField("failureResponse", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REDIRECT_RESPONSE((short)1, "redirectResponse"),
    ACCEPTED_RESPONSE((short)2, "acceptedResponse"),
    SUCCESS_RESPONSE((short)3, "successResponse"),
    FAILURE_RESPONSE((short)4, "failureResponse");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REDIRECT_RESPONSE
          return REDIRECT_RESPONSE;
        case 2: // ACCEPTED_RESPONSE
          return ACCEPTED_RESPONSE;
        case 3: // SUCCESS_RESPONSE
          return SUCCESS_RESPONSE;
        case 4: // FAILURE_RESPONSE
          return FAILURE_RESPONSE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REDIRECT_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("redirectResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RedirectResponse.class)));
    tmpMap.put(_Fields.ACCEPTED_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("acceptedResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("successResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SuccessResponse.class)));
    tmpMap.put(_Fields.FAILURE_RESPONSE, new org.apache.thrift.meta_data.FieldMetaData("failureResponse", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FailureResponse.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseUnion.class, metaDataMap);
  }

  public ResponseUnion() {
    super();
  }

  public ResponseUnion(_Fields setField, Object value) {
    super(setField, value);
  }

  public ResponseUnion(ResponseUnion other) {
    super(other);
  }
  public ResponseUnion deepCopy() {
    return new ResponseUnion(this);
  }

  public static ResponseUnion redirectResponse(RedirectResponse value) {
    ResponseUnion x = new ResponseUnion();
    x.setRedirectResponse(value);
    return x;
  }

  public static ResponseUnion acceptedResponse(String value) {
    ResponseUnion x = new ResponseUnion();
    x.setAcceptedResponse(value);
    return x;
  }

  public static ResponseUnion successResponse(SuccessResponse value) {
    ResponseUnion x = new ResponseUnion();
    x.setSuccessResponse(value);
    return x;
  }

  public static ResponseUnion failureResponse(FailureResponse value) {
    ResponseUnion x = new ResponseUnion();
    x.setFailureResponse(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case REDIRECT_RESPONSE:
        if (value instanceof RedirectResponse) {
          break;
        }
        throw new ClassCastException("Was expecting value of type RedirectResponse for field 'redirectResponse', but got " + value.getClass().getSimpleName());
      case ACCEPTED_RESPONSE:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'acceptedResponse', but got " + value.getClass().getSimpleName());
      case SUCCESS_RESPONSE:
        if (value instanceof SuccessResponse) {
          break;
        }
        throw new ClassCastException("Was expecting value of type SuccessResponse for field 'successResponse', but got " + value.getClass().getSimpleName());
      case FAILURE_RESPONSE:
        if (value instanceof FailureResponse) {
          break;
        }
        throw new ClassCastException("Was expecting value of type FailureResponse for field 'failureResponse', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case REDIRECT_RESPONSE:
          if (field.type == REDIRECT_RESPONSE_FIELD_DESC.type) {
            RedirectResponse redirectResponse;
            redirectResponse = new RedirectResponse();
            redirectResponse.read(iprot);
            return redirectResponse;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case ACCEPTED_RESPONSE:
          if (field.type == ACCEPTED_RESPONSE_FIELD_DESC.type) {
            String acceptedResponse;
            acceptedResponse = iprot.readString();
            return acceptedResponse;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SUCCESS_RESPONSE:
          if (field.type == SUCCESS_RESPONSE_FIELD_DESC.type) {
            SuccessResponse successResponse;
            successResponse = new SuccessResponse();
            successResponse.read(iprot);
            return successResponse;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case FAILURE_RESPONSE:
          if (field.type == FAILURE_RESPONSE_FIELD_DESC.type) {
            FailureResponse failureResponse;
            failureResponse = new FailureResponse();
            failureResponse.read(iprot);
            return failureResponse;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case REDIRECT_RESPONSE:
        RedirectResponse redirectResponse = (RedirectResponse)value_;
        redirectResponse.write(oprot);
        return;
      case ACCEPTED_RESPONSE:
        String acceptedResponse = (String)value_;
        oprot.writeString(acceptedResponse);
        return;
      case SUCCESS_RESPONSE:
        SuccessResponse successResponse = (SuccessResponse)value_;
        successResponse.write(oprot);
        return;
      case FAILURE_RESPONSE:
        FailureResponse failureResponse = (FailureResponse)value_;
        failureResponse.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case REDIRECT_RESPONSE:
          RedirectResponse redirectResponse;
          redirectResponse = new RedirectResponse();
          redirectResponse.read(iprot);
          return redirectResponse;
        case ACCEPTED_RESPONSE:
          String acceptedResponse;
          acceptedResponse = iprot.readString();
          return acceptedResponse;
        case SUCCESS_RESPONSE:
          SuccessResponse successResponse;
          successResponse = new SuccessResponse();
          successResponse.read(iprot);
          return successResponse;
        case FAILURE_RESPONSE:
          FailureResponse failureResponse;
          failureResponse = new FailureResponse();
          failureResponse.read(iprot);
          return failureResponse;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case REDIRECT_RESPONSE:
        RedirectResponse redirectResponse = (RedirectResponse)value_;
        redirectResponse.write(oprot);
        return;
      case ACCEPTED_RESPONSE:
        String acceptedResponse = (String)value_;
        oprot.writeString(acceptedResponse);
        return;
      case SUCCESS_RESPONSE:
        SuccessResponse successResponse = (SuccessResponse)value_;
        successResponse.write(oprot);
        return;
      case FAILURE_RESPONSE:
        FailureResponse failureResponse = (FailureResponse)value_;
        failureResponse.write(oprot);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case REDIRECT_RESPONSE:
        return REDIRECT_RESPONSE_FIELD_DESC;
      case ACCEPTED_RESPONSE:
        return ACCEPTED_RESPONSE_FIELD_DESC;
      case SUCCESS_RESPONSE:
        return SUCCESS_RESPONSE_FIELD_DESC;
      case FAILURE_RESPONSE:
        return FAILURE_RESPONSE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public RedirectResponse getRedirectResponse() {
    if (getSetField() == _Fields.REDIRECT_RESPONSE) {
      return (RedirectResponse)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'redirectResponse' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setRedirectResponse(RedirectResponse value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.REDIRECT_RESPONSE;
    value_ = value;
  }

  public String getAcceptedResponse() {
    if (getSetField() == _Fields.ACCEPTED_RESPONSE) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'acceptedResponse' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setAcceptedResponse(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.ACCEPTED_RESPONSE;
    value_ = value;
  }

  public SuccessResponse getSuccessResponse() {
    if (getSetField() == _Fields.SUCCESS_RESPONSE) {
      return (SuccessResponse)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'successResponse' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSuccessResponse(SuccessResponse value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.SUCCESS_RESPONSE;
    value_ = value;
  }

  public FailureResponse getFailureResponse() {
    if (getSetField() == _Fields.FAILURE_RESPONSE) {
      return (FailureResponse)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'failureResponse' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setFailureResponse(FailureResponse value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.FAILURE_RESPONSE;
    value_ = value;
  }

  public boolean isSetRedirectResponse() {
    return setField_ == _Fields.REDIRECT_RESPONSE;
  }


  public boolean isSetAcceptedResponse() {
    return setField_ == _Fields.ACCEPTED_RESPONSE;
  }


  public boolean isSetSuccessResponse() {
    return setField_ == _Fields.SUCCESS_RESPONSE;
  }


  public boolean isSetFailureResponse() {
    return setField_ == _Fields.FAILURE_RESPONSE;
  }


  public boolean equals(Object other) {
    if (other instanceof ResponseUnion) {
      return equals((ResponseUnion)other);
    } else {
      return false;
    }
  }

  public boolean equals(ResponseUnion other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ResponseUnion other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
